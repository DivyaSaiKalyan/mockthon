var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.432,1,2.387]],["body/controllers/AppController.html",[0,2.409,1,4.014,2,1.97,3,0.208,4,0.208,5,0.174,6,4.106,7,0.208,8,5.019,9,0.184,10,0.433,11,0.023,12,0.802,13,3.656,14,4.106,15,0.243,16,2.394,17,1.97,18,4.106,19,0.912,20,1.305,21,4.821,22,0.018,23,0.018]],["title/modules/AppModule.html",[24,1.525,25,2.387]],["body/modules/AppModule.html",[1,3.491,2,1.803,3,0.134,4,0.134,5,0.112,9,0.09,10,0.51,11,0.023,12,0.518,13,3.512,14,2.65,15,0.157,22,0.014,23,0.014,24,1.92,25,4.681,26,1.545,27,2.19,28,2.65,29,2.65,30,2.65,31,3.809,32,3.809,33,3.809,34,3.809,35,2.534,36,1.787,37,1.787,38,3.112,39,2.748,40,2.748,41,1.002,42,1.938,43,4.412,44,5.577,45,0.333,46,3.112,47,1.002,48,0.842,49,0.513,50,1.002,51,3.112,52,0.946,53,2.347,54,4.412,55,1.938,56,1.354,57,3.112,58,2.347,59,3.112,60,2.119,61,3.112,62,3.112,63,1.92,64,2.347,65,1.92,66,2.119,67,1.803,68,1.938,69,1.658,70,1.803,71,1.658,72,1.92,73,1.938,74,2.048,75,2.119,76,3.112,77,3.112,78,3.112,79,3.112,80,3.112,81,2.119,82,3.112,83,2.347,84,3.112,85,1.545,86,3.112,87,1.658,88,3.112,89,1.787,90,3.112,91,1.545,92,3.112,93,2.19,94,3.112,95,1.787,96,3.112]],["title/injectables/AppService.html",[13,2.013,97,0.844]],["body/injectables/AppService.html",[3,0.216,4,0.216,5,0.18,7,0.216,8,5.126,9,0.187,10,0.366,11,0.023,12,0.83,13,3.456,15,0.252,18,4.251,19,0.944,20,1.351,22,0.019,23,0.019,97,1.45,98,2.171,99,4.251,100,4.991,101,4.991]],["title/classes/BadRequest.html",[9,0.101,102,2.013]],["body/classes/BadRequest.html",[3,0.173,4,0.173,5,0.144,7,0.173,9,0.179,10,0.293,11,0.023,12,0.665,15,0.312,22,0.016,23,0.016,45,0.428,102,3.786,103,1.447,104,2.488,105,4.002,106,4.376,107,2.626,108,4.106,109,2.864,110,3.995,111,2.721,112,3.563,113,2.294,114,2.721,115,2.721,116,3.351,117,2.721,118,2.721,119,3.108,120,2.721,121,2.294,122,2.721,123,2.721,124,2.128,125,2.721]],["title/controllers/BookingController.html",[0,1.432,126,2.387]],["body/controllers/BookingController.html",[0,2.168,2,1.355,3,0.143,4,0.143,5,0.12,7,0.143,9,0.096,10,0.458,11,0.023,12,0.551,15,0.167,16,1.646,17,1.355,19,1.295,20,1.248,22,0.014,23,0.014,41,1.485,45,0.494,47,1.485,48,1.248,49,0.536,50,1.485,52,1.402,74,2.972,75,2.258,126,3.141,127,2.824,128,2.258,129,2.5,130,4.613,131,1.885,132,3.478,133,4.613,134,4.613,135,2.29,136,1.575,137,0.385,138,2.399,139,4.518,140,2.824,141,3.572,142,1.485,143,3.315,144,3.315,145,4,146,1.645,147,1.885,148,2.007,149,2.824,150,4.324,151,3.906,152,4.613,153,3.315,154,3.304,155,4,156,3.478,157,1.904,158,3.046,159,2.824,160,2.258,161,1.442,162,1.904,163,3.315,164,2.065,165,2.065,166,2.824,167,3.315,168,3.315,169,3.315,170,3.315,171,2.824,172,1.773,173,3.315,174,3.315,175,3.315,176,3.315,177,3.315]],["title/modules/BookingModule.html",[24,1.525,31,2.183]],["body/modules/BookingModule.html",[2,2.077,3,0.165,4,0.165,5,0.138,7,0.165,9,0.111,10,0.506,11,0.023,12,0.636,15,0.193,22,0.016,23,0.016,24,2.647,26,1.898,27,2.523,31,4.298,35,2.919,36,2.196,37,2.196,39,3.165,40,2.381,42,3.165,55,2.381,56,1.663,67,2.077,68,2.381,69,2.037,70,2.077,71,2.037,72,2.211,73,2.381,74,2.359,75,2.604,126,3.888,129,3.832,158,3.74,159,3.256,178,3.256,179,3.256,180,3.233,181,3.233,182,3.823,183,1.544,184,3.823,185,3.256,186,3.256,187,3.823]],["title/entities/BookingOperationTheater.html",[74,1.627,188,1.129]],["body/entities/BookingOperationTheater.html",[3,0.123,4,0.123,5,0.103,7,0.123,9,0.082,10,0.417,11,0.023,15,0.144,19,1.259,22,0.013,23,0.013,45,0.685,48,1.12,49,0.743,67,2.614,69,1.515,72,2.783,74,2.484,91,1.412,107,1.162,137,0.33,142,2.06,150,4.287,155,4.287,161,1.238,165,2.576,188,1.723,189,2.423,190,1.257,191,4.874,192,5.686,193,2.799,194,4.151,195,5.686,196,5.053,197,2.844,198,3.304,199,3.234,200,2.844,201,1.69,202,2.799,203,2.844,204,2.817,205,2.844,206,3.523,207,4.136,208,2.844,209,4.035,210,3.333,211,3.645,212,2.844,213,4.136,214,2.844,215,2.844,216,2.844,217,3.813,218,4.151,219,0.916,220,2.053,221,1.771,222,2.844,223,1.634]],["title/injectables/BookingService.html",[97,0.844,158,2.013]],["body/injectables/BookingService.html",[3,0.109,4,0.109,5,0.091,7,0.109,9,0.073,10,0.455,11,0.023,12,0.42,15,0.127,17,1.858,19,1.228,20,1.026,22,0.012,23,0.012,41,1.22,45,0.487,47,1.464,48,1.231,49,0.528,50,1.464,52,1.151,56,1.099,67,1.549,68,1.573,69,1.346,72,1.649,73,1.573,74,2.736,75,1.72,97,0.913,98,1.099,109,1.549,121,1.451,129,2.857,137,0.293,138,2.185,139,3.873,140,3.227,141,3.147,146,1.449,147,1.549,148,1.649,149,2.151,150,4.444,151,4.014,154,2.832,155,4.286,158,2.176,164,2.36,166,2.151,172,2.185,180,2.926,181,2.926,183,1.727,185,2.151,186,2.151,219,0.813,223,2.611,224,2.151,225,2.581,226,5.052,227,5.684,228,5.281,229,2.526,230,3.147,231,2.526,232,3.789,233,2.526,234,2.526,235,3.789,236,3.789,237,1.905,238,2.526,239,1.72,240,2.526,241,2.422,242,2.185,243,3.789,244,2.526,245,4.547,246,2.526,247,2.526,248,3.873,249,2.526,250,2.526,251,2.36,252,2.081,253,2.151,254,2.526,255,2.526,256,2.526,257,2.526,258,2.526,259,2.526,260,1.905,261,2.526,262,2.526,263,3.789,264,2.526,265,2.526,266,2.526,267,2.151,268,2.526,269,1.72]],["title/injectables/CacheManagerInterceptor.html",[97,0.844,270,2.642]],["body/injectables/CacheManagerInterceptor.html",[3,0.141,4,0.141,5,0.118,7,0.141,9,0.152,10,0.418,11,0.023,12,0.543,15,0.165,16,1.619,20,1.234,22,0.014,23,0.014,41,1.469,45,0.563,47,1.469,48,1.234,49,0.53,50,1.469,52,0.991,95,1.873,97,1.099,98,1.419,109,2.149,137,0.379,138,2.304,146,1.308,172,1.254,183,1.386,190,1.386,242,1.754,270,3.439,271,4.85,272,2.778,273,4.561,274,4.682,275,5.694,276,5.259,277,2.778,278,5.288,279,4.561,280,3.262,281,4.85,282,3.582,283,5.694,284,3.262,285,3.884,286,3.439,287,2.032,288,3.02,289,4.561,290,4.561,291,4.561,292,4.561,293,3.884,294,3.884,295,3.884,296,4.561,297,4.294,298,4.561,299,2.778,300,3.262,301,2.46,302,2.778,303,2.46,304,3.439,305,3.262,306,2.778,307,5.694,308,2.46,309,3.262,310,3.262,311,2.222,312,3.262,313,2.619,314,3.262,315,3.262,316,3.262]],["title/classes/CommonEntity.html",[9,0.101,317,2.183]],["body/classes/CommonEntity.html",[3,0.095,4,0.095,5,0.08,7,0.095,9,0.099,10,0.307,11,0.023,15,0.111,19,1.311,22,0.011,23,0.011,45,0.715,49,0.776,93,1.096,103,0.8,107,1.398,136,1.168,137,0.257,142,2.15,151,2.329,188,1.101,190,1.039,198,3.388,199,3.325,201,1.398,219,0.711,220,3.026,221,1.375,317,2.13,318,1.881,319,4.713,320,3.42,321,2.329,322,3.844,323,3.844,324,3.844,325,3.844,326,3.844,327,3.472,328,3.844,329,3.844,330,3.844,331,3.844,332,3.844,333,2.913,334,2.913,335,3.565,336,2.913,337,3.565,338,2.913,339,6.096,340,2.208,341,2.208,342,2.208,343,2.208,344,2.208,345,2.208,346,2.208,347,2.208,348,2.208,349,2.208,350,2.208,351,2.208,352,5.624,353,2.208,354,4.79,355,1.881,356,4.593,357,2.579,358,2.208,359,1.881,360,2.208,361,1.881,362,1.504,363,2.208,364,2.208,365,1.881,366,2.208,367,2.208,368,1.881,369,2.579,370,4.68,371,1.375]],["title/controllers/ConfigureController.html",[0,1.432,372,2.387]],["body/controllers/ConfigureController.html",[0,2.192,2,1.384,3,0.146,4,0.146,5,0.122,7,0.146,9,0.098,10,0.446,11,0.023,12,0.563,15,0.171,16,1.681,17,1.384,20,1.452,22,0.015,23,0.015,41,1.507,42,2.109,45,0.501,52,1.422,70,1.913,71,1.804,72,2.334,89,2.688,128,2.306,137,0.393,138,2.415,142,1.507,146,1.66,148,2.037,160,2.306,161,1.473,172,2.335,180,2.663,183,1.759,241,1.804,242,1.302,274,2.553,288,3.081,294,3.987,297,4.364,302,2.884,304,2.553,372,3.188,373,2.884,374,3.987,375,4.929,376,4.929,377,4.681,378,3.386,379,4.681,380,3.386,381,4.681,382,3.386,383,3.386,384,2.884,385,3.386,386,3.386,387,3.386,388,3.386,389,5.365,390,3.386,391,4.681,392,5.365,393,4.681,394,4.681,395,4.681,396,3.386]],["title/modules/ConfigureModule.html",[24,1.525,32,2.183]],["body/modules/ConfigureModule.html",[2,2.25,3,0.187,4,0.187,5,0.156,7,0.187,9,0.125,10,0.494,11,0.023,12,0.719,15,0.218,22,0.017,23,0.017,24,2.775,26,2.146,27,2.733,32,4.194,35,3.162,36,2.483,37,2.483,39,3.429,40,2.692,42,3.429,55,2.692,56,1.881,70,1.767,71,2.303,72,2.395,73,2.692,180,3.343,372,4.126,384,3.682,397,4.323,398,4.323,399,4.323,400,4.323,401,4.323,402,4.323,403,4.323]],["title/injectables/ConfigureService.html",[97,0.844,180,1.74]],["body/injectables/ConfigureService.html",[3,0.135,4,0.135,5,0.113,7,0.135,9,0.149,10,0.433,11,0.023,12,0.521,15,0.158,17,1.812,19,0.973,20,1.392,22,0.014,23,0.014,41,1.428,45,0.599,47,1.428,48,1.598,49,0.515,50,1.428,52,1.862,56,1.363,70,1.28,71,1.669,72,1.363,73,1.951,97,1.068,98,1.363,109,1.812,121,1.799,131,1.812,135,2.201,136,1.513,137,0.364,138,2.517,146,1.604,147,1.812,148,2.238,157,1.799,172,1.978,180,2.201,219,1.009,225,3.019,228,4.382,230,3.924,237,2.362,239,2.133,241,2.362,242,1.204,248,4.382,251,1.951,252,1.204,253,2.668,374,4.764,375,4.764,376,4.764,404,2.668,405,3.775,406,3.775,407,4.433,408,3.133,409,5.145,410,3.133,411,3.775,412,4.433,413,3.133,414,4.764,415,3.133,416,5.594,417,4.433,418,3.133,419,4.433,420,2.668,421,3.133,422,3.133,423,3.133,424,3.133]],["title/classes/ForbiddenException.html",[9,0.101,113,2.013]],["body/classes/ForbiddenException.html",[3,0.173,4,0.173,5,0.144,7,0.173,9,0.179,10,0.293,11,0.023,12,0.665,15,0.312,22,0.016,23,0.016,45,0.428,102,3.351,103,1.447,104,2.488,105,4.002,106,4.376,107,2.626,108,4.106,109,2.864,111,2.721,112,4.216,113,3.005,114,2.721,115,2.721,116,3.351,117,2.721,118,2.721,119,3.108,120,2.721,121,2.294,122,2.721,123,2.721,124,2.128,125,2.721,425,3.995]],["title/classes/GlobalAccess.html",[9,0.101,426,2.183]],["body/classes/GlobalAccess.html",[3,0.208,4,0.208,5,0.174,7,0.208,9,0.17,11,0.022,15,0.243,19,0.912,22,0.018,23,0.018,45,0.516,49,0.56,103,1.746,137,0.56,183,1.465,190,1.791,287,3.003,288,2.769,426,3.67,427,4.106,428,4.821,429,4.13,430,6.919,431,4.335,432,4.821]],["title/classes/HttpExceptionFilter.html",[9,0.101,433,2.387]],["body/classes/HttpExceptionFilter.html",[3,0.163,4,0.163,5,0.137,7,0.163,9,0.183,10,0.37,11,0.023,12,0.629,15,0.191,22,0.016,23,0.016,41,1.625,45,0.405,47,1.218,48,1.024,49,0.439,50,1.218,52,1.149,53,2.852,81,3.868,95,2.898,103,1.37,108,3.773,124,2.689,137,0.439,146,1.085,183,1.841,194,4.298,242,2.329,252,1.454,313,2.898,433,3.437,434,3.222,435,5.16,436,6.058,437,6.058,438,5.16,439,5.679,440,5.679,441,5.046,442,6.058,443,3.783,444,3.783,445,2.172,446,3.783,447,3.783,448,3.783,449,3.783,450,3.783,451,3.783,452,2.852,453,3.783,454,3.783,455,3.783,456,3.783,457,3.783,458,3.222,459,3.783,460,3.783,461,3.783,462,3.783,463,3.783,464,3.783]],["title/injectables/LoggerMiddleware.html",[60,2.387,97,0.844]],["body/injectables/LoggerMiddleware.html",[3,0.272,4,0.148,5,0.124,7,0.148,9,0.099,10,0.346,11,0.023,12,0.57,15,0.173,20,1.574,22,0.015,23,0.015,41,1.52,45,0.505,47,1.104,48,0.928,49,0.398,50,1.104,52,1.041,53,3.559,60,3.214,95,1.968,97,1.137,98,1.491,124,3.359,131,1.929,137,0.398,146,1.853,183,1.768,190,1.434,241,3.25,242,2.236,252,1.815,282,3.962,287,2.134,288,1.968,313,3.78,431,3.214,445,1.968,452,3.559,458,4.598,465,2.919,466,6.305,467,4.72,468,4.72,469,4.72,470,5.817,471,3.427,472,4.72,473,4.72,474,3.427,475,4.72,476,3.427,477,5.398,478,3.427,479,3.427,480,3.427,481,3.427,482,5.398,483,3.427,484,3.427,485,4.72,486,4.72]],["title/entities/Login.html",[65,1.525,188,1.129]],["body/entities/Login.html",[3,0.139,4,0.139,5,0.116,7,0.139,9,0.093,10,0.415,11,0.023,15,0.162,19,1.169,22,0.014,23,0.014,45,0.639,49,0.693,63,2.866,65,2.463,85,2.96,87,3.509,91,1.597,93,1.597,107,1.315,137,0.374,138,1.237,142,1.92,146,0.923,161,1.4,172,1.237,183,1.373,188,1.823,190,1.373,193,2.998,196,3.847,198,2.243,199,3.161,201,1.846,202,2.998,204,3.077,210,3.525,211,3.077,217,3.525,219,1.036,220,2.243,221,2.004,242,1.237,282,2.191,295,2.74,429,3.251,487,2.426,488,3.218,489,3.218,490,3.218,491,2.74,492,3.218,493,3.218,494,3.218,495,3.218,496,3.218,497,4.517,498,3.847,499,3.847,500,3.218,501,3.077,502,3.406,503,2.74,504,2.74,505,2.74,506,2.426,507,2.74,508,2.74,509,2.74,510,2.426,511,3.218,512,3.218,513,3.218,514,3.218,515,2.74]],["title/classes/Maintenance.html",[9,0.101,220,1.74]],["body/classes/Maintenance.html",[3,0.131,4,0.131,5,0.109,7,0.131,9,0.088,10,0.222,11,0.023,15,0.153,19,1.274,22,0.013,23,0.013,45,0.668,49,0.725,93,2.147,103,1.096,131,1.768,135,2.147,136,1.477,137,0.352,142,2.009,151,3.437,188,1.393,190,1.314,199,3.302,219,0.974,220,2.734,252,1.663,287,3.774,333,4.299,334,4.299,335,4.962,336,4.299,337,4.962,338,4.299,354,5.828,355,3.684,356,5.161,357,3.261,359,3.684,361,3.684,362,2.946,365,3.684,368,3.684,516,2.577,517,4.325,518,4.325,519,3.026,520,3.026,521,3.026,522,3.026,523,3.026,524,3.026,525,3.026,526,3.026,527,3.026]],["title/classes/NotFound.html",[9,0.101,119,1.867]],["body/classes/NotFound.html",[3,0.173,4,0.173,5,0.144,7,0.173,9,0.179,10,0.293,11,0.023,12,0.665,15,0.312,22,0.016,23,0.016,45,0.428,102,3.351,103,1.447,104,2.488,105,4.002,106,4.376,107,2.626,108,4.106,109,2.864,111,2.721,112,3.563,113,2.294,114,2.721,115,2.721,116,3.351,117,2.721,118,2.721,119,3.512,120,2.721,121,2.294,122,2.721,123,2.721,124,2.128,125,2.721,528,3.995]],["title/entities/OperationTheaterInfo.html",[72,1.525,188,1.129]],["body/entities/OperationTheaterInfo.html",[3,0.164,4,0.164,5,0.137,7,0.164,9,0.11,10,0.418,11,0.023,15,0.192,19,0.958,20,1.029,22,0.016,23,0.016,45,0.61,49,0.661,72,2.642,74,3.226,91,1.888,107,1.554,137,0.442,142,1.834,147,1.554,188,1.955,190,1.539,193,3.27,198,2.514,199,3.081,201,2.07,202,3.27,204,3.449,209,3.819,210,3.154,219,1.225,220,2.514,221,2.368,252,1.462,414,5.385,529,3.239,530,2.867,531,5.064,532,3.803,533,3.803,534,3.803,535,3.819,536,3.239,537,2.867,538,3.239,539,4.313,540,2.867,541,2.59,542,3.239]],["title/guards/RolesGuards.html",[543,2.642,544,2.642]],["body/guards/RolesGuards.html",[3,0.138,4,0.138,5,0.215,7,0.138,9,0.093,10,0.453,11,0.023,12,0.533,15,0.162,16,1.59,17,1.309,20,1.716,22,0.014,23,0.014,41,1.45,45,0.482,47,1.45,48,1.219,49,0.523,50,1.45,52,0.973,93,2.805,95,1.84,97,1.085,109,2.128,132,4.26,137,0.372,146,1.707,162,3.545,164,3.243,165,3.243,183,1.809,242,1.232,277,2.728,278,5.258,281,4.811,285,3.835,286,3.395,299,4.435,301,2.415,303,2.415,306,2.728,308,2.415,311,2.182,321,2.182,362,3.067,426,1.995,429,3.243,544,3.395,545,5.207,546,2.728,547,5.649,548,5.952,549,3.203,550,3.203,551,3.203,552,3.203,553,3.547,554,4.503,555,3.203,556,5.207,557,3.203,558,4.435,559,3.203,560,3.203,561,3.203,562,3.203]],["title/entities/StaffCategory.html",[70,1.432,188,1.129]],["body/entities/StaffCategory.html",[3,0.163,4,0.163,5,0.136,7,0.163,9,0.109,10,0.416,11,0.023,15,0.19,19,0.951,20,1.018,22,0.016,23,0.016,45,0.607,49,0.658,67,2.812,69,2.005,70,2.471,91,1.868,107,1.538,137,0.437,142,1.824,146,1.079,147,1.538,183,1.143,188,1.947,190,1.528,193,3.253,198,2.496,199,3.072,201,2.055,202,3.253,204,3.425,210,3.765,211,3.425,219,1.212,220,2.496,221,2.343,223,2.161,252,1.447,530,2.837,535,3.792,537,2.837,540,2.837,541,2.563,563,3.205,564,4.751,565,3.763,566,3.763,567,4.283,568,3.763,569,3.763,570,5.028,571,3.763]],["title/controllers/StaffinfoController.html",[0,1.432,572,2.387]],["body/controllers/StaffinfoController.html",[0,2.171,2,1.358,3,0.229,4,0.144,5,0.12,7,0.144,9,0.096,10,0.458,11,0.023,12,0.553,15,0.168,16,1.65,17,1.358,19,1.255,20,1.438,22,0.014,23,0.014,41,1.488,45,0.569,47,1.71,48,1.438,49,0.617,50,1.71,52,1.614,67,1.358,128,2.263,131,1.358,137,0.386,138,2.551,141,3.575,142,1.71,145,4.005,146,1.791,147,1.888,148,2.311,156,2.506,157,1.908,160,2.263,161,1.446,162,1.908,171,2.83,172,1.278,181,2.637,223,2.653,553,2.263,572,3.147,573,2.83,574,3.935,575,4.523,576,3.935,577,2.83,578,3.575,579,3.323,580,3.323,581,2.83,582,4.62,583,3.323,584,4.328,585,2.83,586,4.62,587,3.323,588,2.83,589,2.83,590,3.323,591,3.323,592,3.323,593,3.323,594,3.323,595,3.323,596,3.323,597,3.323,598,3.323,599,3.323,600,3.323,601,3.323]],["title/modules/StaffinfoModule.html",[24,1.525,33,2.183]],["body/modules/StaffinfoModule.html",[2,2.228,3,0.26,4,0.184,5,0.154,7,0.184,9,0.123,10,0.492,11,0.023,12,0.708,15,0.215,22,0.017,23,0.017,24,2.759,26,2.114,27,2.707,33,4.177,35,3.132,36,2.446,37,2.446,39,3.396,40,2.652,55,2.652,56,1.853,67,1.74,68,2.652,69,2.269,70,2.228,71,2.269,135,2.707,136,1.862,181,3.33,223,3.132,572,4.097,588,3.627,602,4.258,603,4.258,604,4.258,605,4.111,606,4.258,607,4.258]],["title/injectables/StaffinfoService.html",[97,0.844,181,1.74]],["body/injectables/StaffinfoService.html",[3,0.229,4,0.103,5,0.086,7,0.103,9,0.069,10,0.425,11,0.023,12,0.398,15,0.121,17,1.487,19,1.252,20,1.431,22,0.011,23,0.011,41,1.172,45,0.596,47,1.793,48,1.614,49,0.647,50,1.793,52,1.607,56,1.042,67,1.799,68,1.491,69,1.276,70,2.161,71,1.276,97,0.876,98,1.042,109,1.487,119,2.817,137,0.278,138,2.546,141,3.88,146,1.044,147,1.487,148,2.301,172,2.141,181,1.806,219,0.771,223,3.687,225,2.478,230,3.605,239,1.631,241,1.939,242,2.141,251,3.062,252,2.141,260,1.805,327,2.478,411,3.749,420,2.039,452,3.707,564,1.805,567,2.039,574,3.099,575,3.099,576,3.099,577,3.099,578,3.062,581,3.099,584,4.898,585,3.099,589,2.039,608,2.039,609,3.639,610,3.639,611,2.394,612,2.394,613,3.639,614,2.394,615,3.639,616,3.639,617,2.394,618,2.394,619,2.394,620,3.639,621,2.394,622,2.394,623,2.394,624,5.569,625,2.394,626,3.639,627,2.394,628,2.039,629,2.394,630,2.394,631,2.394,632,2.394,633,5.569,634,3.639,635,2.394]],["title/interfaces/SwaggerConfig.html",[636,2.387,637,2.387]],["body/interfaces/SwaggerConfig.html",[3,0.189,4,0.189,5,0.158,7,0.296,11,0.022,15,0.22,19,1.35,22,0.017,23,0.017,49,0.743,131,1.783,136,1.489,137,0.507,190,1.683,636,2.971,637,3.772,638,4.363,639,3.716,640,4.771,641,3.29,642,3.716,643,5.748,644,5.748,645,5.748]],["title/classes/TypeOrmInterface.html",[9,0.101,646,2.387]],["body/classes/TypeOrmInterface.html",[3,0.185,4,0.185,5,0.154,7,0.185,9,0.124,11,0.022,15,0.216,19,1.307,22,0.017,23,0.017,45,0.703,48,1.479,49,0.762,81,4.469,83,4.542,85,3.258,87,3.496,89,3.769,103,1.547,136,1.458,137,0.496,147,1.746,190,1.66,201,2.595,219,1.375,641,3.221,642,3.638,646,3.721,647,3.638,648,4.271,649,4.271,650,4.271,651,4.271,652,5.463,653,4.271]],["title/classes/Unauthorized.html",[9,0.101,116,2.013]],["body/classes/Unauthorized.html",[3,0.173,4,0.173,5,0.144,7,0.173,9,0.179,10,0.293,11,0.023,12,0.665,15,0.312,22,0.016,23,0.016,45,0.428,102,3.351,103,1.447,104,2.488,105,4.002,106,4.376,107,2.626,108,4.106,109,2.864,111,2.721,112,3.563,113,2.294,114,2.721,115,2.721,116,3.786,117,2.721,118,2.721,119,3.108,120,2.721,121,2.294,122,2.721,123,2.721,124,2.128,125,2.721,654,3.995]],["title/entities/User.html",[63,1.525,188,1.129]],["body/entities/User.html",[3,0.18,4,0.18,5,0.15,7,0.18,9,0.12,10,0.437,11,0.023,15,0.21,22,0.017,23,0.017,45,0.575,49,0.624,63,2.735,65,3.068,91,2.065,93,2.666,107,1.7,137,0.483,142,1.729,188,2.024,190,1.632,193,3.738,201,2.195,202,3.416,219,1.339,317,3.345,491,3.542,499,4.574,655,3.542,656,4.159,657,4.74,658,5.37,659,5.37,660,4.159,661,4.159,662,3.542]],["title/controllers/UserController.html",[0,1.432,663,2.387]],["body/controllers/UserController.html",[0,1.909,2,1.08,3,0.114,4,0.114,5,0.096,7,0.202,9,0.076,10,0.439,11,0.023,12,0.44,15,0.133,16,1.312,17,1.08,20,1.564,22,0.012,23,0.012,41,1.262,45,0.5,47,1.504,48,1.264,49,0.543,50,1.504,52,1.756,63,2.819,65,1.705,89,2.251,93,2.739,128,1.8,131,1.602,135,1.946,136,1.338,137,0.307,138,2.413,142,1.504,145,1.993,146,1.658,147,2.511,148,1.705,154,2.909,156,2.955,157,2.967,160,1.8,161,1.15,172,1.796,183,1.191,269,3.182,286,2.955,311,2.67,313,3.871,433,3.182,445,2.683,663,2.67,664,2.251,665,3.92,666,3.338,667,3.979,668,3.979,669,2.251,670,3.218,671,3.92,672,2.643,673,2.67,674,4.401,675,2.251,676,3.218,677,3.92,678,2.643,679,3.979,680,2.955,681,2.955,682,3.338,683,3.92,684,2.251,685,3.92,686,2.643,687,2.67,688,2.955,689,3.338,690,4.671,691,2.643,692,1.8,693,2.683,694,2.251,695,2.251,696,2.643,697,2.251,698,2.643,699,2.643,700,2.643,701,2.643,702,2.643,703,3.92,704,2.643,705,2.643]],["title/modules/UserModule.html",[24,1.525,34,2.183]],["body/modules/UserModule.html",[2,2.1,3,0.168,4,0.168,5,0.14,7,0.168,9,0.112,10,0.497,11,0.023,12,0.646,15,0.196,22,0.016,23,0.016,24,2.664,26,1.929,27,2.55,34,4.219,35,2.951,36,2.232,37,2.232,39,3.2,40,2.42,55,2.42,56,1.691,63,2.771,64,2.93,65,2.235,66,2.647,131,2.1,135,2.55,136,1.754,605,3.874,663,3.92,693,3.757,694,3.31,706,3.31,707,3.31,708,3.757,709,3.886,710,3.886,711,3.31,712,3.886,713,2.93,714,3.886,715,3.886,716,5.137,717,3.886,718,3.886,719,3.886]],["title/injectables/UserService.html",[97,0.844,693,2.013]],["body/injectables/UserService.html",[3,0.079,4,0.079,5,0.066,7,0.16,9,0.107,10,0.423,11,0.023,12,0.305,15,0.092,17,1.514,19,0.701,20,1.261,22,0.009,23,0.009,41,0.95,45,0.533,47,1.603,48,1.347,49,0.578,50,1.603,52,1.753,56,0.797,63,2.657,64,1.382,65,2.445,66,2.893,85,2.109,87,1.572,89,1.695,93,2.109,97,0.711,98,0.797,109,1.736,124,2.652,131,1.206,135,1.465,136,1.008,137,0.213,138,2.41,141,1.141,146,1.655,147,2.139,148,2.027,154,1.838,157,2.859,162,1.695,172,2.093,183,1.591,219,0.59,230,3.26,239,1.248,241,1.974,242,2.31,251,1.141,252,1.425,260,1.382,269,1.248,282,1.248,311,2.01,313,3.507,405,2.514,406,2.514,426,2.308,435,2.514,445,2.128,501,1.248,502,1.382,503,1.561,504,1.561,505,1.561,506,1.382,507,1.561,508,1.561,509,1.561,510,1.382,515,1.561,558,1.561,628,2.514,666,2.514,667,2.514,668,2.514,669,2.514,670,3.26,673,2.01,674,3.618,675,2.514,676,2.646,679,3.156,680,2.225,681,2.225,682,2.514,684,2.514,687,2.01,688,2.794,693,2.44,695,1.561,697,3.618,708,3.006,711,1.561,720,1.382,721,2.951,722,2.951,723,1.833,724,3.706,725,1.833,726,2.951,727,1.833,728,2.951,729,1.833,730,2.951,731,1.833,732,1.833,733,3.706,734,3.706,735,3.706,736,2.951,737,1.833,738,3.156,739,1.833,740,1.833,741,1.833,742,1.833,743,1.561,744,2.951,745,1.833,746,1.833,747,1.833,748,1.833,749,1.833,750,1.833,751,1.833,752,1.833,753,4.977,754,2.951,755,2.951,756,1.833,757,1.833,758,1.833,759,1.833,760,1.833,761,1.833,762,1.833,763,2.951,764,2.951,765,1.833,766,1.833,767,1.833,768,1.833,769,1.833]],["title/injectables/ValidationPipe.html",[97,0.844,692,2.387]],["body/injectables/ValidationPipe.html",[3,0.153,4,0.153,5,0.128,7,0.153,9,0.159,10,0.403,11,0.023,12,0.59,15,0.179,19,0.671,20,1.671,22,0.015,23,0.015,41,1.556,45,0.517,47,1.556,48,1.308,49,0.561,50,1.556,52,1.468,95,2.037,97,1.164,98,1.543,137,0.412,138,2.113,146,1.692,148,1.543,172,1.364,183,1.936,201,1.449,237,2.674,241,2.928,242,2.113,251,2.209,252,1.364,288,3.659,357,2.674,362,3.743,371,2.209,541,2.416,641,2.674,692,3.291,770,3.021,771,6.175,772,4.832,773,4.832,774,4.832,775,4.832,776,3.547,777,4.832,778,5.496,779,4.832,780,5.901,781,3.547,782,4.832,783,3.547,784,3.021,785,3.547,786,4.832,787,3.547,788,3.547,789,3.547,790,3.547,791,3.547,792,3.547,793,3.547,794,3.547]],["title/coverage.html",[795,3.614]],["body/coverage.html",[0,2.267,1,1.824,5,0.097,6,2.281,9,0.19,11,0.023,13,1.538,22,0.012,23,0.012,49,0.311,58,2.019,60,1.824,63,1.165,65,1.165,67,1.095,70,1.095,72,1.165,74,1.243,97,1.517,99,2.281,102,1.538,104,3.239,113,1.538,116,1.538,119,1.427,126,1.824,127,2.281,158,1.538,162,1.538,164,1.668,165,1.668,180,1.33,181,1.33,188,1.87,189,2.281,220,1.33,224,2.281,252,1.03,267,2.281,270,2.019,271,2.281,272,2.281,293,6.172,317,1.668,318,2.281,372,1.824,373,2.281,404,2.281,426,1.668,427,2.281,431,4.289,433,1.824,434,2.281,465,2.281,487,2.984,501,2.696,516,2.281,529,2.281,543,2.019,544,2.019,546,2.281,553,1.824,563,2.281,572,1.824,573,2.281,578,1.668,608,2.281,636,1.824,637,1.824,639,2.281,646,1.824,647,2.281,655,2.281,663,1.824,664,2.281,670,1.668,676,1.668,692,1.824,693,1.538,708,1.538,720,2.984,770,2.281,795,2.019,796,2.678,797,2.678,798,2.678,799,5.807,800,2.281,801,2.281,802,6.913,803,2.281,804,5.807,805,2.281,806,3.958,807,4.009,808,4.707,809,2.281,810,2.281,811,2.281,812,3.371,813,2.281,814,2.281,815,2.678,816,2.678,817,2.678,818,2.281,819,2.281,820,2.678,821,2.678,822,2.678,823,2.678,824,2.281,825,2.678,826,2.678,827,2.678,828,2.678,829,2.281,830,2.281,831,2.678,832,2.678,833,2.678,834,2.281,835,2.281,836,2.678]],["title/dependencies.html",[27,2.094,837,2.922]],["body/dependencies.html",[9,0.164,11,0.023,12,0.753,22,0.018,23,0.018,27,2.249,56,1.971,161,1.971,219,1.459,274,3.415,297,3.415,301,3.415,303,3.415,371,2.821,445,3.256,640,3.085,687,3.085,689,3.858,713,3.415,784,3.858,838,6.487,839,4.53,840,4.53,841,4.53,842,4.53,843,4.53,844,4.53,845,4.53,846,4.53,847,4.53,848,4.53,849,4.53,850,4.53,851,4.53,852,4.53,853,4.53,854,4.53,855,4.53,856,4.53,857,4.53,858,4.53,859,4.53,860,4.53,861,4.53]],["title/miscellaneous/functions.html",[862,1.99,863,3.592]],["body/miscellaneous/functions.html",[5,0.176,7,0.21,11,0.021,22,0.018,23,0.018,47,1.569,48,1.318,49,0.566,50,1.569,52,1.48,136,1.663,137,0.566,183,1.48,640,4.039,673,4.039,680,3.673,681,3.673,811,4.149,812,4.149,813,5.051,834,4.149,835,5.446,862,3.317,863,4.149,864,4.871,865,4.871,866,4.871,867,4.871,868,4.871,869,4.149,870,4.871,871,5.93,872,4.149,873,4.871,874,4.871,875,4.871,876,4.871]],["title/index.html",[137,0.339,869,2.488,877,2.922]],["body/index.html",[4,0.18,7,0.18,11,0.022,22,0.017,23,0.017,136,1.42,230,2.59,438,3.542,506,3.136,795,3.136,872,3.542,878,4.159,879,4.159,880,5.37,881,4.159,882,4.159,883,4.159,884,4.159,885,4.159,886,4.159,887,5.948,888,4.159,889,4.159,890,6.782,891,4.159,892,4.159,893,6.665,894,4.159,895,4.159,896,5.37,897,4.159,898,4.159,899,4.159,900,4.159,901,5.37,902,5.37,903,4.159,904,4.159,905,4.159,906,5.37,907,5.37,908,4.159,909,4.159,910,4.159,911,4.159,912,3.542,913,4.159,914,4.159,915,4.159,916,4.159,917,4.159,918,4.159,919,4.159,920,4.159,921,4.159,922,4.159,923,4.159,924,4.159,925,4.159,926,4.159,927,4.159,928,4.159,929,4.159]],["title/injectables/jwtServiceClass.html",[97,0.844,708,2.013]],["body/injectables/jwtServiceClass.html",[3,0.139,4,0.139,5,0.116,7,0.139,9,0.151,10,0.415,11,0.023,12,0.534,15,0.162,16,1.594,17,1.312,19,0.986,20,1.411,22,0.014,23,0.014,41,1.452,45,0.606,47,1.821,48,1.531,49,0.657,50,1.821,52,1.718,63,1.397,65,2.592,66,2.186,85,1.594,97,1.086,98,1.397,109,2.131,131,1.843,136,1.54,137,0.373,138,2.531,146,1.772,148,2.268,154,2.809,157,1.844,172,1.734,225,3.072,242,1.734,269,2.186,313,3.421,321,3.072,445,1.844,673,3.072,687,4.207,688,4.784,708,2.59,713,2.421,738,2.734,743,2.734,805,2.734,930,4.51,931,4.51,932,4.51,933,4.51,934,3.21,935,6.177,936,3.21,937,4.51,938,3.21,939,4.51,940,3.21,941,4.51,942,3.21,943,4.51,944,3.21,945,4.51,946,3.21,947,3.21]],["title/classes/loginDto.html",[9,0.101,676,2.183]],["body/classes/loginDto.html",[3,0.196,4,0.196,5,0.164,7,0.196,9,0.131,10,0.334,11,0.023,15,0.229,19,1.228,22,0.018,23,0.018,45,0.608,49,0.66,65,2.472,85,3.435,87,3.302,103,1.646,137,0.528,142,1.83,161,1.977,190,1.727,217,4.164,657,4.897,676,3.538,829,3.87,948,4.839,949,4.544,950,4.544]],["title/modules.html",[26,2.379]],["body/modules.html",[11,0.019,22,0.019,23,0.019,25,3.51,26,2.558,31,3.21,32,3.21,33,3.21,34,3.21,912,5.899,951,6.926,952,6.926,953,6.926]],["title/overview.html",[954,4.082]],["body/overview.html",[2,1.67,11,0.022,13,3.388,22,0.016,23,0.016,25,4.818,26,2.029,27,2.636,28,3.481,29,3.481,30,3.481,31,4.311,32,4.031,33,4.031,34,4.207,35,3.05,36,2.347,37,2.347,91,2.029,98,1.778,103,1.48,158,3.388,178,3.481,179,3.481,180,3.1,181,3.1,543,3.082,636,2.783,693,3.388,706,3.481,707,3.481,708,3.388,954,3.481,955,5.31,956,4.087,957,4.087,958,4.087,959,5.31]],["title/entities/staffInfo.html",[67,1.432,188,1.129]],["body/entities/staffInfo.html",[3,0.146,4,0.146,5,0.122,7,0.146,9,0.098,10,0.425,11,0.023,15,0.171,19,0.885,20,0.917,22,0.015,23,0.015,45,0.62,49,0.672,67,2.365,70,2.723,74,3.162,91,1.681,107,1.384,137,0.393,142,1.864,146,0.971,147,1.384,183,1.029,188,1.864,190,1.422,193,3.489,198,2.324,199,2.819,201,1.913,202,3.081,206,2.884,209,3.529,210,3.913,211,3.941,218,3.987,219,1.09,252,1.302,317,2.915,498,3.987,530,2.553,535,3.529,536,2.884,537,2.553,538,2.884,539,3.987,540,2.553,541,2.306,542,2.884,584,4.045,662,2.884,818,5.174,819,2.884,960,4.681,961,3.386,962,3.386,963,3.386,964,4.681,965,3.386,966,3.386,967,3.386,968,3.386]],["title/classes/staffInfoDto.html",[9,0.101,578,2.183]],["body/classes/staffInfoDto.html",[3,0.119,4,0.119,5,0.1,9,0.117,10,0.297,11,0.023,15,0.139,19,1.328,22,0.013,23,0.013,45,0.709,49,0.769,103,1,137,0.321,142,2.131,161,1.202,190,1.23,198,3.46,199,3.235,201,1.654,217,4.161,322,4.236,323,4.236,324,4.236,325,4.236,326,4.236,327,3.826,328,3.613,329,4.236,330,4.236,331,4.236,332,4.236,369,3.052,370,4.932,371,1.72,564,3.613,578,2.521,824,2.352,969,5.496,970,2.761,971,2.761,972,2.761,973,2.761,974,2.761,975,2.761,976,2.761,977,2.761,978,2.761,979,2.761,980,2.761,981,2.352,982,2.761,983,2.761,984,4.048]],["title/classes/userDto.html",[9,0.101,670,2.183]],["body/classes/userDto.html",[3,0.109,4,0.109,5,0.091,7,0.109,9,0.11,10,0.278,11,0.023,15,0.128,19,1.331,22,0.012,23,0.012,45,0.71,48,1.539,49,0.771,63,1.651,85,2.26,87,2.425,103,0.916,137,0.294,142,2.136,161,1.101,190,1.153,198,3.421,199,3.198,201,1.551,217,4.249,322,4.085,323,4.085,324,4.085,325,4.085,326,4.085,327,3.689,328,3.432,329,4.085,330,4.085,331,4.085,332,4.085,369,2.861,370,4.837,371,1.576,429,2.835,657,4.288,670,2.363,830,2.155,948,3.231,969,5.381,981,2.155,985,2.53,986,2.53,987,2.53,988,2.53,989,2.53,990,2.53,991,2.53,992,2.53,993,2.53,994,2.53,995,2.53,996,2.53,997,2.53,998,2.53]],["title/miscellaneous/variables.html",[862,1.99,999,3.592]],["body/miscellaneous/variables.html",[3,0.155,7,0.155,11,0.022,19,1.046,22,0.015,23,0.015,42,2.237,49,0.72,58,3.675,81,2.446,83,2.708,85,1.783,87,2.947,89,2.063,105,3.035,131,1.468,132,2.708,135,1.783,136,1.664,137,0.417,162,3.177,164,3.035,165,3.445,183,1.681,219,1.157,287,4.202,288,3.874,304,2.708,308,4.171,321,2.446,429,3.035,431,2.446,487,2.708,501,4.224,502,3.675,510,3.675,553,3.767,605,2.708,637,2.446,640,2.446,643,3.059,644,3.059,645,3.059,646,2.446,720,2.708,800,3.059,801,4.711,803,3.059,807,3.059,809,3.059,810,4.151,814,3.059,862,2.446,999,3.059,1000,5.531,1001,3.591,1002,3.591,1003,3.591,1004,3.591,1005,3.591,1006,3.591,1007,3.591,1008,4.873,1009,3.591,1010,4.873,1011,4.873,1012,3.591,1013,4.873,1014,3.591,1015,3.591,1016,3.591,1017,3.591,1018,4.873,1019,3.591]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":791,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["0.1.13",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":959,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":1014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":295,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"entities/Login.html":{}}}],["10/13",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":293,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["1000",{"_index":393,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["12",{"_index":958,"title":{},"body":{"overview.html":{}}}],["14/15",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["2.3.3",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3h",{"_index":719,"title":{},"body":{"modules/UserModule.html":{}}}],["4.0.0",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":808,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":955,"title":{},"body":{"overview.html":{}}}],["5.2.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":806,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":956,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["76",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":957,"title":{},"body":{"overview.html":{}}}],["93",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["abouve",{"_index":453,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["access/global.access",{"_index":552,"title":{},"body":{"guards/RolesGuards.html":{}}}],["add",{"_index":615,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["addaddressline1",{"_index":322,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["addaddressline2",{"_index":323,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["addbookinginfo(bookingoperationtheater",{"_index":538,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/staffInfo.html":{}}}],["addstaff",{"_index":574,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["addstaff(@body",{"_index":596,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["addstaff(data",{"_index":577,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["addstaffinfo(staffinfo",{"_index":569,"title":{},"body":{"entities/StaffCategory.html":{}}}],["admin",{"_index":553,"title":{},"body":{"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["agent",{"_index":480,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["already",{"_index":235,"title":{},"body":{"injectables/BookingService.html":{}}}],["amazing",{"_index":913,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":217,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"classes/loginDto.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["apis",{"_index":132,"title":{},"body":{"controllers/BookingController.html":{},"guards/RolesGuards.html":{},"miscellaneous/variables.html":{}}}],["apitags",{"_index":160,"title":{},"body":{"controllers/BookingController.html":{},"controllers/ConfigureController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{}}}],["apitags('booking",{"_index":167,"title":{},"body":{"controllers/BookingController.html":{}}}],["apitags('staff",{"_index":592,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["apitags('staffcategory",{"_index":385,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["apitags('user",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":872,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":886,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":25,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":13,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":780,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":442,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":541,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"injectables/ValidationPipe.html":{},"entities/staffInfo.html":{}}}],["async",{"_index":138,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"entities/Login.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["author",{"_index":922,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["avaliabale",{"_index":321,"title":{},"body":{"classes/CommonEntity.html":{},"guards/RolesGuards.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["avaliable",{"_index":135,"title":{},"body":{"controllers/BookingController.html":{},"injectables/ConfigureService.html":{},"classes/Maintenance.html":{},"modules/StaffinfoModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":172,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"entities/Login.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["backers",{"_index":914,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":102,"title":{"classes/BadRequest.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["badrequestexception",{"_index":237,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('enter",{"_index":253,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{}}}],["badrequestexception('validation",{"_index":792,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["based",{"_index":452,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/StaffinfoService.html":{}}}],["bcrypt",{"_index":501,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(data.password",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(this.password",{"_index":514,"title":{},"body":{"entities/Login.html":{}}}],["bcryptjs",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["beforeinsert",{"_index":497,"title":{},"body":{"entities/Login.html":{}}}],["below",{"_index":455,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["body",{"_index":156,"title":{},"body":{"controllers/BookingController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{}}}],["book",{"_index":226,"title":{},"body":{"injectables/BookingService.html":{}}}],["booked",{"_index":236,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookig",{"_index":130,"title":{},"body":{"controllers/BookingController.html":{}}}],["booking",{"_index":129,"title":{},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{}}}],["booking.controller",{"_index":184,"title":{},"body":{"modules/BookingModule.html":{}}}],["booking.createdby",{"_index":256,"title":{},"body":{"injectables/BookingService.html":{}}}],["booking.entity",{"_index":536,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/staffInfo.html":{}}}],["booking.operationtheaterinfo",{"_index":259,"title":{},"body":{"injectables/BookingService.html":{}}}],["booking.service",{"_index":159,"title":{},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{}}}],["booking.staffinfo",{"_index":258,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingcontroller",{"_index":126,"title":{"controllers/BookingController.html":{}},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"coverage.html":{}}}],["bookingmodule",{"_index":31,"title":{"modules/BookingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules.html":{},"overview.html":{}}}],["bookingoperationtheater",{"_index":74,"title":{"entities/BookingOperationTheater.html":{}},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"entities/OperationTheaterInfo.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["bookingoperationtheater(data",{"_index":140,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["bookingoperationtheater.operationtheaterinfo",{"_index":531,"title":{},"body":{"entities/OperationTheaterInfo.html":{}}}],["bookingoperationtheater.staffinfo",{"_index":960,"title":{},"body":{"entities/staffInfo.html":{}}}],["bookingrepository",{"_index":232,"title":{},"body":{"injectables/BookingService.html":{}}}],["bookingservice",{"_index":158,"title":{"injectables/BookingService.html":{}},"body":{"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"coverage.html":{},"overview.html":{}}}],["boolean",{"_index":362,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":953,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":951,"title":{},"body":{"modules.html":{}}}],["building",{"_index":881,"title":{},"body":{"index.html":{}}}],["business",{"_index":405,"title":{},"body":{"injectables/ConfigureService.html":{},"injectables/UserService.html":{}}}],["cache",{"_index":297,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":382,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["cached",{"_index":307,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["cachekey",{"_index":801,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cachekeyvalue",{"_index":1008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachemanager",{"_index":302,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{}}}],["cachemanager.caching",{"_index":289,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["cachemanagerinterceptor",{"_index":270,"title":{"injectables/CacheManagerInterceptor.html":{}},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["cachemodule",{"_index":400,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["cachemodule.register",{"_index":403,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["callhandler",{"_index":283,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["canactivate",{"_index":548,"title":{},"body":{"guards/RolesGuards.html":{}}}],["canactivate(context",{"_index":550,"title":{},"body":{"guards/RolesGuards.html":{}}}],["cascade",{"_index":659,"title":{},"body":{"entities/User.html":{}}}],["catch",{"_index":440,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":441,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":446,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":419,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["category",{"_index":584,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"entities/staffInfo.html":{}}}],["categoryname",{"_index":564,"title":{},"body":{"entities/StaffCategory.html":{},"injectables/StaffinfoService.html":{},"classes/staffInfoDto.html":{}}}],["chche",{"_index":273,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["city",{"_index":324,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["class",{"_index":9,"title":{"classes/BadRequest.html":{},"classes/CommonEntity.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"classes/loginDto.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["classes",{"_index":103,"title":{},"body":{"classes/BadRequest.html":{},"classes/CommonEntity.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"classes/loginDto.html":{},"overview.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["cluster_appmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_bookingmodule",{"_index":178,"title":{},"body":{"modules/BookingModule.html":{},"overview.html":{}}}],["cluster_bookingmodule_providers",{"_index":179,"title":{},"body":{"modules/BookingModule.html":{},"overview.html":{}}}],["cluster_configuremodule",{"_index":397,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["cluster_configuremodule_providers",{"_index":398,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["cluster_staffinfomodule",{"_index":602,"title":{},"body":{"modules/StaffinfoModule.html":{}}}],["cluster_staffinfomodule_providers",{"_index":603,"title":{},"body":{"modules/StaffinfoModule.html":{}}}],["cluster_usermodule",{"_index":706,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":707,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["coding",{"_index":133,"title":{},"body":{"controllers/BookingController.html":{}}}],["column",{"_index":199,"title":{},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["column()@apiproperty",{"_index":196,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{}}}],["column()@isint",{"_index":349,"title":{},"body":{"classes/CommonEntity.html":{}}}],["column()@isstring",{"_index":339,"title":{},"body":{"classes/CommonEntity.html":{}}}],["column({default",{"_index":356,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["column({unique",{"_index":494,"title":{},"body":{"entities/Login.html":{}}}],["columns",{"_index":518,"title":{},"body":{"classes/Maintenance.html":{}}}],["commom",{"_index":874,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":319,"title":{},"body":{"classes/CommonEntity.html":{}}}],["common.entity",{"_index":662,"title":{},"body":{"entities/User.html":{},"entities/staffInfo.html":{}}}],["common/access/global.access",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["common/constant/role.constant",{"_index":166,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["common/decorators/roles.decorator",{"_index":590,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["common/filters/custom.exception",{"_index":622,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["common/filters/exception.filter",{"_index":683,"title":{},"body":{"controllers/UserController.html":{}}}],["common/middleware/logger.middleware",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["common/providers/jwt.service",{"_index":711,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["commonentity",{"_index":317,"title":{"classes/CommonEntity.html":{}},"body":{"classes/CommonEntity.html":{},"entities/User.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["config/typeorm/typeorm.config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configurations",{"_index":605,"title":{},"body":{"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"miscellaneous/variables.html":{}}}],["configure(consumer",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["configure.controller",{"_index":401,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["configure.service",{"_index":384,"title":{},"body":{"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{}}}],["configure/configure.service",{"_index":186,"title":{},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{}}}],["configurecontroller",{"_index":372,"title":{"controllers/ConfigureController.html":{}},"body":{"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"coverage.html":{}}}],["configuremodule",{"_index":32,"title":{"modules/ConfigureModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigureModule.html":{},"modules.html":{},"overview.html":{}}}],["configureservice",{"_index":180,"title":{"injectables/ConfigureService.html":{}},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"coverage.html":{},"overview.html":{}}}],["const",{"_index":242,"title":{},"body":{"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["constant",{"_index":308,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"miscellaneous/variables.html":{}}}],["constant/role.constant",{"_index":554,"title":{},"body":{"guards/RolesGuards.html":{}}}],["constants",{"_index":454,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor",{"_index":109,"title":{},"body":{"classes/BadRequest.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"injectables/StaffinfoService.html":{},"classes/Unauthorized.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["constructor(bookingrepository",{"_index":229,"title":{},"body":{"injectables/BookingService.html":{}}}],["constructor(jwtservice",{"_index":934,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["constructor(private",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingController.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{},"injectables/jwtServiceClass.html":{}}}],["constructor(reflector",{"_index":277,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["constructor(staffcategoryrepository",{"_index":408,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["constructor(staffinforepository",{"_index":611,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["constructor(userrepository",{"_index":723,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["contentlength",{"_index":482,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["context",{"_index":285,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["context.gethandler",{"_index":306,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/BookingController.html":{},"controllers/ConfigureController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/BookingController.html":{},"controllers/ConfigureController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('booking",{"_index":168,"title":{},"body":{"controllers/BookingController.html":{}}}],["controller('configure",{"_index":386,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["controller('staffinfo",{"_index":593,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["controller('user",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":689,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["country",{"_index":325,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["coverage",{"_index":795,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":673,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["createdat",{"_index":355,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createdate",{"_index":359,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createdby",{"_index":333,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createddate",{"_index":151,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createdocument",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":870,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdtime",{"_index":334,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createjwttoken",{"_index":931,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["createjwttoken(login",{"_index":937,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["createtime",{"_index":361,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["createuser",{"_index":666,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":701,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":669,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":657,"title":{},"body":{"entities/User.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["credentials",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["credimport",{"_index":682,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":447,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":450,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":449,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["custom",{"_index":105,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":147,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"entities/staffInfo.html":{}}}],["data.categoryname",{"_index":626,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["data.doctoremail",{"_index":247,"title":{},"body":{"injectables/BookingService.html":{}}}],["data.firstname",{"_index":628,"title":{},"body":{"injectables/StaffinfoService.html":{},"injectables/UserService.html":{}}}],["data.optname",{"_index":250,"title":{},"body":{"injectables/BookingService.html":{}}}],["data.password",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["data.role",{"_index":748,"title":{},"body":{"injectables/UserService.html":{}}}],["data.username",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"controllers/ConfigureController.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["datafrom",{"_index":389,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["date().toisostring",{"_index":460,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().tolocaledatestring",{"_index":526,"title":{},"body":{"classes/Maintenance.html":{}}}],["date().tolocaletimestring",{"_index":527,"title":{},"body":{"classes/Maintenance.html":{}}}],["dateofbirth",{"_index":326,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["declared",{"_index":642,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{}}}],["decorator",{"_index":1010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":142,"title":{},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["default",{"_index":287,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["delete",{"_index":154,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["delete('deletebooking/:optname/:operationname/:createddate",{"_index":152,"title":{},"body":{"controllers/BookingController.html":{}}}],["delete('logoutuser",{"_index":685,"title":{},"body":{"controllers/UserController.html":{}}}],["deletebooking",{"_index":139,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["deletebooking(optname",{"_index":149,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{}}}],["deletetoken",{"_index":932,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["deletetoken(response",{"_index":939,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["dependencies",{"_index":27,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":254,"title":{},"body":{"injectables/BookingService.html":{}}}],["development",{"_index":892,"title":{},"body":{"index.html":{}}}],["disable",{"_index":504,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["doctor",{"_index":165,"title":{},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"guards/RolesGuards.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["doctoremail",{"_index":191,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["document",{"_index":876,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentation",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":948,"title":{},"body":{"classes/loginDto.html":{},"classes/userDto.html":{}}}],["dto/login.dto",{"_index":695,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/staff.dto",{"_index":589,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["dto/user.dto",{"_index":697,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dummy",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["e2e",{"_index":903,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":882,"title":{},"body":{"index.html":{}}}],["email",{"_index":141,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{}}}],["emailid",{"_index":327,"title":{},"body":{"classes/CommonEntity.html":{},"injectables/StaffinfoService.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["enception",{"_index":106,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["entire",{"_index":437,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["entities",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/User.html":{},"overview.html":{},"entities/staffInfo.html":{}}}],["entities/booking.entity",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{}}}],["entities/login.entity",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["entities/operationtheaterinfo.entity",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{}}}],["entities/staff",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{}}}],["entities/staffcategory.entity",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{}}}],["entities/user.entity",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":188,"title":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/User.html":{},"entities/staffInfo.html":{}},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/User.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["errors",{"_index":788,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":790,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":503,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":507,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["exception",{"_index":444,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":451,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":464,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":439,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":436,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execution",{"_index":868,"title":{},"body":{"miscellaneous/functions.html":{}}}],["executioncontext",{"_index":281,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["expiresin",{"_index":718,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["express",{"_index":445,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["extends",{"_index":107,"title":{},"body":{"classes/BadRequest.html":{},"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"classes/ForbiddenException.html":{},"entities/Login.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"entities/staffInfo.html":{}}}],["failed",{"_index":793,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["fake",{"_index":394,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["false",{"_index":562,"title":{},"body":{"guards/RolesGuards.html":{}}}],["feilds",{"_index":320,"title":{},"body":{"classes/CommonEntity.html":{}}}],["fetch",{"_index":416,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["final",{"_index":312,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["find",{"_index":435,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["findbycategory",{"_index":609,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["findbycategory(category",{"_index":616,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["finduser",{"_index":721,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(username",{"_index":728,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":328,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["forbidden",{"_index":112,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["forbiddenexception",{"_index":113,"title":{"classes/ForbiddenException.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["found",{"_index":121,"title":{},"body":{"classes/BadRequest.html":{},"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["framework",{"_index":880,"title":{},"body":{"index.html":{}}}],["fro",{"_index":1011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fromdate",{"_index":192,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["function",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":863,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":198,"title":{},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["generates",{"_index":354,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["get('getbyemailandcategory/:category/:email",{"_index":582,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["get('getstaffbasedoncategory/:category",{"_index":586,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["get('operationtheaterinfo",{"_index":377,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["get('staffcategory",{"_index":379,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["getbookinginfo",{"_index":263,"title":{},"body":{"injectables/BookingService.html":{}}}],["getbyemailandcategory",{"_index":575,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["getbyemailandcategory(category",{"_index":581,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["getcategory",{"_index":624,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["getdata",{"_index":633,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["getdoctor",{"_index":245,"title":{},"body":{"injectables/BookingService.html":{}}}],["gethello",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getoperationtheaterbyname",{"_index":407,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["getoperationtheaterbyname(operationtheatername",{"_index":412,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["getoperationtheaterinfo",{"_index":375,"title":{},"body":{"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{}}}],["getrecption",{"_index":243,"title":{},"body":{"injectables/BookingService.html":{}}}],["getrecption.lastname",{"_index":257,"title":{},"body":{"injectables/BookingService.html":{}}}],["getrole",{"_index":722,"title":{},"body":{"injectables/UserService.html":{}}}],["getrole(request",{"_index":730,"title":{},"body":{"injectables/UserService.html":{}}}],["getstaffbasedoncategory",{"_index":576,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["getstaffbasedoncategory(@param('category",{"_index":598,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["getstaffbasedoncategory(category",{"_index":585,"title":{},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{}}}],["getstaffcategory",{"_index":376,"title":{},"body":{"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{}}}],["getstaffinfobyemail",{"_index":610,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["getstaffinfobyemail(email",{"_index":620,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["gettheater",{"_index":248,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{}}}],["getting",{"_index":877,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser.password",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser.role",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["globalaccess",{"_index":426,"title":{"classes/GlobalAccess.html":{}},"body":{"classes/GlobalAccess.html":{},"guards/RolesGuards.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["globalaccess.role",{"_index":558,"title":{},"body":{"guards/RolesGuards.html":{},"injectables/UserService.html":{}}}],["grow",{"_index":909,"title":{},"body":{"index.html":{}}}],["guard",{"_index":543,"title":{"guards/RolesGuards.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":545,"title":{},"body":{"guards/RolesGuards.html":{}}}],["hash",{"_index":502,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":374,"title":{},"body":{"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{}}}],["here",{"_index":136,"title":{},"body":{"controllers/BookingController.html":{},"classes/CommonEntity.html":{},"injectables/ConfigureService.html":{},"classes/Maintenance.html":{},"modules/StaffinfoModule.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["hospital",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":448,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":108,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpexceptionfilter",{"_index":433,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["httponly",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":926,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":111,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.bad_request",{"_index":125,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.forbidden",{"_index":115,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.not_found",{"_index":122,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.unauthorized",{"_index":118,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["ia",{"_index":134,"title":{},"body":{"controllers/BookingController.html":{}}}],["id",{"_index":193,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/User.html":{},"entities/staffInfo.html":{}}}],["identifier",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"injectables/ValidationPipe.html":{}}}],["implemeted",{"_index":456,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["imported",{"_index":680,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{}}}],["incorrect",{"_index":255,"title":{},"body":{"injectables/BookingService.html":{}}}],["index",{"_index":137,"title":{"index.html":{}},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":871,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["info.entity",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"entities/StaffCategory.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{}}}],["info.entity.ts",{"_index":819,"title":{},"body":{"coverage.html":{},"entities/staffInfo.html":{}}}],["info.entity.ts:20",{"_index":963,"title":{},"body":{"entities/staffInfo.html":{}}}],["info.entity.ts:23",{"_index":962,"title":{},"body":{"entities/staffInfo.html":{}}}],["info.entity.ts:28",{"_index":966,"title":{},"body":{"entities/staffInfo.html":{}}}],["info.entity.ts:35",{"_index":961,"title":{},"body":{"entities/staffInfo.html":{}}}],["inherited",{"_index":352,"title":{},"body":{"classes/CommonEntity.html":{}}}],["inject",{"_index":383,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["inject(cache_manager",{"_index":387,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["injectable",{"_index":97,"title":{"injectables/AppService.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}},"body":{"injectables/AppService.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{}}}],["injectables",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"overview.html":{}}}],["injectrepository",{"_index":239,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{}}}],["injectrepository(bookingoperationtheater",{"_index":240,"title":{},"body":{"injectables/BookingService.html":{}}}],["injectrepository(login",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(operationtheaterinfo",{"_index":421,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["injectrepository(staffcategory",{"_index":420,"title":{},"body":{"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{}}}],["injectrepository(staffinfo",{"_index":623,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["injectrepository(user",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["inputs",{"_index":772,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["installation",{"_index":889,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":891,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":276,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["intercept(context",{"_index":280,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["interceptor",{"_index":275,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["interface",{"_index":636,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":638,"title":{},"body":{"interfaces/SwaggerConfig.html":{}}}],["intiels",{"_index":679,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ip",{"_index":476,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["isactive",{"_index":335,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["isemail",{"_index":984,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["isemail()@apiproperty",{"_index":976,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["isint",{"_index":369,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["isint()@apiproperty",{"_index":981,"title":{},"body":{"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["isstring",{"_index":370,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["isstring()@apiproperty",{"_index":969,"title":{},"body":{"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["join",{"_index":916,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":498,"title":{},"body":{"entities/Login.html":{},"entities/staffInfo.html":{}}}],["jwt",{"_index":687,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["jwtmodule",{"_index":712,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":715,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":935,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["jwtserviceclass",{"_index":708,"title":{"injectables/jwtServiceClass.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"overview.html":{}}}],["kamil",{"_index":923,"title":{},"body":{"index.html":{}}}],["key",{"_index":304,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":329,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["length",{"_index":484,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["library",{"_index":681,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":929,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":907,"title":{},"body":{"index.html":{}}}],["line",{"_index":505,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["localhost",{"_index":1016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":466,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(loggermiddleware.name",{"_index":473,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":60,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggin",{"_index":472,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logics",{"_index":406,"title":{},"body":{"injectables/ConfigureService.html":{},"injectables/UserService.html":{}}}],["login",{"_index":65,"title":{"entities/Login.html":{}},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{}}}],["login.createdby",{"_index":749,"title":{},"body":{"injectables/UserService.html":{}}}],["login.entity",{"_index":661,"title":{},"body":{"entities/User.html":{}}}],["login.password",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["login.role",{"_index":747,"title":{},"body":{"injectables/UserService.html":{}}}],["login.user",{"_index":658,"title":{},"body":{"entities/User.html":{}}}],["login.username",{"_index":743,"title":{},"body":{"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["logindto",{"_index":676,"title":{"classes/loginDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDto.html":{}}}],["loginrepository",{"_index":724,"title":{},"body":{"injectables/UserService.html":{}}}],["loginuser",{"_index":667,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["loginuser(data",{"_index":675,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logout",{"_index":738,"title":{},"body":{"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["logoutuser",{"_index":668,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logoutuser(response",{"_index":684,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["main",{"_index":866,"title":{},"body":{"miscellaneous/functions.html":{}}}],["maintanance",{"_index":517,"title":{},"body":{"classes/Maintenance.html":{}}}],["maintanance.entity",{"_index":221,"title":{},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{}}}],["maintenance",{"_index":220,"title":{"classes/Maintenance.html":{}},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"coverage.html":{}}}],["maintenance:11",{"_index":363,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:16",{"_index":364,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:21",{"_index":353,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:26",{"_index":366,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:31",{"_index":358,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:37",{"_index":360,"title":{},"body":{"classes/CommonEntity.html":{}}}],["maintenance:43",{"_index":367,"title":{},"body":{"classes/CommonEntity.html":{}}}],["manager",{"_index":274,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"dependencies.html":{}}}],["manager.interceptor.ts",{"_index":272,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["manager.interceptor.ts:17",{"_index":279,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["manager.interceptor.ts:22",{"_index":284,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["many",{"_index":209,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/OperationTheaterInfo.html":{},"entities/staffInfo.html":{}}}],["manytoone",{"_index":218,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/staffInfo.html":{}}}],["manytoone(undefined",{"_index":206,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/staffInfo.html":{}}}],["match",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":292,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["memory",{"_index":291,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["message",{"_index":463,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":778,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methjod",{"_index":930,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["method",{"_index":146,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"entities/staffInfo.html":{}}}],["methods",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["middleware",{"_index":467,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["middlewareconsumer",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":862,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":906,"title":{},"body":{"index.html":{}}}],["mockthon",{"_index":1013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":896,"title":{},"body":{"index.html":{}}}],["module",{"_index":24,"title":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":26,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/booking/booking.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/configure/configure.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/staffinfo/staffinfo.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":919,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":924,"title":{},"body":{"index.html":{}}}],["name",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/userDto.html":{}}}],["nest",{"_index":887,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":928,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":298,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["nestjs",{"_index":873,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"classes/Unauthorized.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["nestjs/core",{"_index":303,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":713,"title":{},"body":{"modules/UserModule.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["nestjs/platform",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":161,"title":{},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"controllers/ConfigureController.html":{},"entities/Login.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{},"dependencies.html":{},"classes/loginDto.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["nestjs/typeorm",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"injectables/BookingService.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":475,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":252,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["newdata",{"_index":260,"title":{},"body":{"injectables/BookingService.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{}}}],["next",{"_index":282,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"injectables/UserService.html":{}}}],["next.handle().pipe",{"_index":314,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["nextfunction",{"_index":470,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node.js",{"_index":879,"title":{},"body":{"index.html":{}}}],["notfound",{"_index":119,"title":{"classes/NotFound.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"injectables/StaffinfoService.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["notfoundexception",{"_index":238,"title":{},"body":{"injectables/BookingService.html":{}}}],["notfoundexception('not",{"_index":265,"title":{},"body":{"injectables/BookingService.html":{}}}],["npm",{"_index":890,"title":{},"body":{"index.html":{}}}],["null",{"_index":540,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["number",{"_index":201,"title":{},"body":{"entities/BookingOperationTheater.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["object",{"_index":786,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object.assign(booking",{"_index":261,"title":{},"body":{"injectables/BookingService.html":{}}}],["object.assign(staffinfo",{"_index":630,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["object.assign(user",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["observable",{"_index":299,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["one",{"_index":210,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["onetomany",{"_index":535,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["onetomany(undefined",{"_index":530,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["onetoone",{"_index":499,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":491,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["open",{"_index":908,"title":{},"body":{"index.html":{}}}],["openapiobject",{"_index":875,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operation",{"_index":227,"title":{},"body":{"injectables/BookingService.html":{}}}],["operationname",{"_index":150,"title":{},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{}}}],["operationtheaterinfo",{"_index":72,"title":{"entities/OperationTheaterInfo.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"entities/OperationTheaterInfo.html":{},"coverage.html":{}}}],["operationtheaterinfo.bookingoperationtheater",{"_index":207,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["operationtheaterinfo.entity",{"_index":222,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["operationtheaterinforepository",{"_index":409,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["operationtheatername",{"_index":414,"title":{},"body":{"injectables/ConfigureService.html":{},"entities/OperationTheaterInfo.html":{}}}],["optional",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["optname",{"_index":155,"title":{},"body":{"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{}}}],["originalurl",{"_index":477,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":561,"title":{},"body":{"guards/RolesGuards.html":{}}}],["overview",{"_index":954,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":837,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":157,"title":{},"body":{"controllers/BookingController.html":{},"injectables/ConfigureService.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["param('category",{"_index":600,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["param('createddate",{"_index":176,"title":{},"body":{"controllers/BookingController.html":{}}}],["param('email",{"_index":171,"title":{},"body":{"controllers/BookingController.html":{},"controllers/StaffinfoController.html":{}}}],["param('operationname",{"_index":175,"title":{},"body":{"controllers/BookingController.html":{}}}],["param('optname",{"_index":174,"title":{},"body":{"controllers/BookingController.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["parser",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["passport",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["passthrough",{"_index":703,"title":{},"body":{"controllers/UserController.html":{}}}],["password",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"classes/TypeOrmInterface.html":{},"injectables/UserService.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":461,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["phonenumber",{"_index":330,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["pincode",{"_index":331,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["pipetransform",{"_index":782,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":783,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":787,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":917,"title":{},"body":{"index.html":{}}}],["port",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":145,"title":{},"body":{"controllers/BookingController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{}}}],["post('addstaff",{"_index":595,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["post('adduser",{"_index":671,"title":{},"body":{"controllers/UserController.html":{}}}],["post('bookingoperationtheater/:email",{"_index":170,"title":{},"body":{"controllers/BookingController.html":{}}}],["post('loginuser",{"_index":677,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":128,"title":{},"body":{"controllers/BookingController.html":{},"controllers/ConfigureController.html":{},"controllers/StaffinfoController.html":{},"controllers/UserController.html":{}}}],["primari",{"_index":964,"title":{},"body":{"entities/staffInfo.html":{}}}],["primary",{"_index":204,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{}}}],["primarygeneratedcolumn",{"_index":202,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/User.html":{},"entities/staffInfo.html":{}}}],["private",{"_index":241,"title":{},"body":{"injectables/BookingService.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":898,"title":{},"body":{"index.html":{}}}],["program",{"_index":867,"title":{},"body":{"miscellaneous/functions.html":{}}}],["progressive",{"_index":878,"title":{},"body":{"index.html":{}}}],["project",{"_index":438,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["promise",{"_index":286,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{}}}],["properties",{"_index":190,"title":{},"body":{"entities/BookingOperationTheater.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["property",{"_index":777,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["prot",{"_index":652,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["protuct",{"_index":547,"title":{},"body":{"guards/RolesGuards.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{}}}],["push",{"_index":537,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["read",{"_index":918,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["record",{"_index":266,"title":{},"body":{"injectables/BookingService.html":{}}}],["recption",{"_index":164,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"guards/RolesGuards.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recptionist",{"_index":1007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":278,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["related",{"_index":131,"title":{},"body":{"controllers/BookingController.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"controllers/StaffinfoController.html":{},"interfaces/SwaggerConfig.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["relation",{"_index":211,"title":{},"body":{"entities/BookingOperationTheater.html":{},"entities/Login.html":{},"entities/StaffCategory.html":{},"entities/staffInfo.html":{}}}],["repository",{"_index":230,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":124,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"injectables/UserService.html":{}}}],["request.cookies['jwt",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["request.get('user",{"_index":479,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.url",{"_index":462,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('bcryptjs",{"_index":510,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":509,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["res",{"_index":690,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":313,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["response.clearcookie('jwt",{"_index":947,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["response.cookie('jwt",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["response.get('content",{"_index":483,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":481,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.status(status).json",{"_index":457,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["retuimport",{"_index":733,"title":{},"body":{"injectables/UserService.html":{}}}],["retun",{"_index":310,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"injectables/LoggerMiddleware.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"entities/staffInfo.html":{}}}],["returns",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["rimraf",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["rn",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["role",{"_index":429,"title":{},"body":{"classes/GlobalAccess.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":162,"title":{},"body":{"controllers/BookingController.html":{},"guards/RolesGuards.html":{},"controllers/StaffinfoController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(admin",{"_index":594,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["roles(admin)@post('addstaff",{"_index":579,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["roles(recption",{"_index":169,"title":{},"body":{"controllers/BookingController.html":{}}}],["roles(recption)@post('bookingoperationtheater/:email",{"_index":143,"title":{},"body":{"controllers/BookingController.html":{}}}],["roles.includes(admin",{"_index":557,"title":{},"body":{"guards/RolesGuards.html":{}}}],["roles.includes(doctor",{"_index":560,"title":{},"body":{"guards/RolesGuards.html":{}}}],["roles.includes(recption",{"_index":559,"title":{},"body":{"guards/RolesGuards.html":{}}}],["rolesguards",{"_index":544,"title":{"guards/RolesGuards.html":{}},"body":{"guards/RolesGuards.html":{},"coverage.html":{}}}],["root",{"_index":1018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roturs",{"_index":665,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":893,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":301,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"dependencies.html":{}}}],["save",{"_index":311,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":883,"title":{},"body":{"index.html":{}}}],["secret",{"_index":716,"title":{},"body":{"modules/UserModule.html":{}}}],["server",{"_index":884,"title":{},"body":{"index.html":{}}}],["service",{"_index":225,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{},"injectables/jwtServiceClass.html":{}}}],["set",{"_index":428,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["setmetadata('cache",{"_index":1009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":885,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":717,"title":{},"body":{"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"controllers/BookingController.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["sponsors",{"_index":911,"title":{},"body":{"index.html":{}}}],["src/.../cache.decorator.ts",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../login.entity.ts",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":864,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.constant.ts",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":1005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":865,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":1006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:47",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/common/access/global.access",{"_index":740,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/access/global.access.ts",{"_index":427,"title":{},"body":{"classes/GlobalAccess.html":{},"coverage.html":{}}}],["src/common/access/global.access.ts:4",{"_index":432,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["src/common/constant/role.constant",{"_index":591,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["src/common/constant/role.constant.ts",{"_index":807,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/cache.decorator.ts",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/roles.decorator",{"_index":163,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":803,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/custom.exception.ts",{"_index":104,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["src/common/filters/custom.exception.ts:16",{"_index":654,"title":{},"body":{"classes/Unauthorized.html":{}}}],["src/common/filters/custom.exception.ts:26",{"_index":528,"title":{},"body":{"classes/NotFound.html":{}}}],["src/common/filters/custom.exception.ts:36",{"_index":110,"title":{},"body":{"classes/BadRequest.html":{}}}],["src/common/filters/custom.exception.ts:6",{"_index":425,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["src/common/filters/exception.filter",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":434,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:16",{"_index":443,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/common/guards/roles.guards.ts",{"_index":546,"title":{},"body":{"guards/RolesGuards.html":{},"coverage.html":{}}}],["src/common/guards/roles.guards.ts:12",{"_index":549,"title":{},"body":{"guards/RolesGuards.html":{}}}],["src/common/guards/roles.guards.ts:16",{"_index":551,"title":{},"body":{"guards/RolesGuards.html":{}}}],["src/common/interceptor/cache",{"_index":271,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":465,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:11",{"_index":471,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middleware/logger.middleware.ts:9",{"_index":474,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/validation.pipes.ts",{"_index":770,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipes.ts:15",{"_index":781,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipes.ts:27",{"_index":776,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/providers/jwt.service.ts",{"_index":805,"title":{},"body":{"coverage.html":{},"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:10",{"_index":936,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:19",{"_index":938,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:25",{"_index":942,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:31",{"_index":940,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/config/swagger/swagger.config.ts",{"_index":809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger/swagger.interface.ts",{"_index":639,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/config/swagger/swagger.ts",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/typeorm/typeorm.config.ts",{"_index":814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm/typeorm.interface.ts",{"_index":647,"title":{},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{}}}],["src/config/typeorm/typeorm.interface.ts:10",{"_index":653,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:12",{"_index":650,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:14",{"_index":648,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:6",{"_index":649,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:8",{"_index":651,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/entities/booking.entity.ts",{"_index":189,"title":{},"body":{"entities/BookingOperationTheater.html":{},"coverage.html":{}}}],["src/entities/booking.entity.ts:12",{"_index":203,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:17",{"_index":197,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:22",{"_index":212,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:27",{"_index":200,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:32",{"_index":216,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:37",{"_index":205,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:41",{"_index":215,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:48",{"_index":208,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/booking.entity.ts:52",{"_index":214,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["src/entities/common.entity.ts",{"_index":318,"title":{},"body":{"classes/CommonEntity.html":{},"coverage.html":{}}}],["src/entities/common.entity.ts:10",{"_index":346,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:15",{"_index":347,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:20",{"_index":344,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:25",{"_index":348,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:30",{"_index":345,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:35",{"_index":340,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:40",{"_index":341,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:45",{"_index":342,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:50",{"_index":351,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:55",{"_index":343,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/common.entity.ts:60",{"_index":350,"title":{},"body":{"classes/CommonEntity.html":{}}}],["src/entities/login.entity.ts",{"_index":487,"title":{},"body":{"entities/Login.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/login.entity.ts:23",{"_index":488,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:28",{"_index":496,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:33",{"_index":489,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:38",{"_index":490,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:49",{"_index":493,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/maintanance.entity.ts",{"_index":516,"title":{},"body":{"classes/Maintenance.html":{},"coverage.html":{}}}],["src/entities/maintanance.entity.ts:11",{"_index":522,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:16",{"_index":523,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:21",{"_index":519,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:26",{"_index":524,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:31",{"_index":520,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:37",{"_index":521,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:43",{"_index":525,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/operationtheaterinfo.entity.ts",{"_index":529,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"coverage.html":{}}}],["src/entities/operationtheaterinfo.entity.ts:10",{"_index":533,"title":{},"body":{"entities/OperationTheaterInfo.html":{}}}],["src/entities/operationtheaterinfo.entity.ts:14",{"_index":534,"title":{},"body":{"entities/OperationTheaterInfo.html":{}}}],["src/entities/operationtheaterinfo.entity.ts:21",{"_index":532,"title":{},"body":{"entities/OperationTheaterInfo.html":{}}}],["src/entities/staff",{"_index":818,"title":{},"body":{"coverage.html":{},"entities/staffInfo.html":{}}}],["src/entities/staffcategory.entity.ts",{"_index":563,"title":{},"body":{"entities/StaffCategory.html":{},"coverage.html":{}}}],["src/entities/staffcategory.entity.ts:10",{"_index":566,"title":{},"body":{"entities/StaffCategory.html":{}}}],["src/entities/staffcategory.entity.ts:13",{"_index":565,"title":{},"body":{"entities/StaffCategory.html":{}}}],["src/entities/staffcategory.entity.ts:17",{"_index":568,"title":{},"body":{"entities/StaffCategory.html":{}}}],["src/entities/user.entity.ts",{"_index":655,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:12",{"_index":656,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:16",{"_index":660,"title":{},"body":{"entities/User.html":{}}}],["src/main.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/booking/booking.controller.ts",{"_index":127,"title":{},"body":{"controllers/BookingController.html":{},"coverage.html":{}}}],["src/modules/booking/booking.controller.ts:17",{"_index":144,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/modules/booking/booking.controller.ts:26",{"_index":153,"title":{},"body":{"controllers/BookingController.html":{}}}],["src/modules/booking/booking.module.ts",{"_index":182,"title":{},"body":{"modules/BookingModule.html":{}}}],["src/modules/booking/booking.service.ts",{"_index":224,"title":{},"body":{"injectables/BookingService.html":{},"coverage.html":{}}}],["src/modules/booking/booking.service.ts:19",{"_index":231,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/modules/booking/booking.service.ts:30",{"_index":233,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/modules/booking/booking.service.ts:59",{"_index":234,"title":{},"body":{"injectables/BookingService.html":{}}}],["src/modules/configure/configure.controller.ts",{"_index":373,"title":{},"body":{"controllers/ConfigureController.html":{},"coverage.html":{}}}],["src/modules/configure/configure.controller.ts:20",{"_index":380,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["src/modules/configure/configure.controller.ts:43",{"_index":378,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["src/modules/configure/configure.module.ts",{"_index":399,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["src/modules/configure/configure.service.ts",{"_index":404,"title":{},"body":{"injectables/ConfigureService.html":{},"coverage.html":{}}}],["src/modules/configure/configure.service.ts:11",{"_index":410,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["src/modules/configure/configure.service.ts:23",{"_index":418,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["src/modules/configure/configure.service.ts:31",{"_index":415,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["src/modules/configure/configure.service.ts:40",{"_index":413,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts",{"_index":824,"title":{},"body":{"coverage.html":{},"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:12",{"_index":979,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:17",{"_index":975,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:22",{"_index":980,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:27",{"_index":977,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:32",{"_index":970,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:37",{"_index":971,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:42",{"_index":973,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:47",{"_index":983,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:52",{"_index":974,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:57",{"_index":982,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:61",{"_index":972,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/dto/staff.dto.ts:7",{"_index":978,"title":{},"body":{"classes/staffInfoDto.html":{}}}],["src/modules/staffinfo/staffinfo.controller.ts",{"_index":573,"title":{},"body":{"controllers/StaffinfoController.html":{},"coverage.html":{}}}],["src/modules/staffinfo/staffinfo.controller.ts:17",{"_index":580,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["src/modules/staffinfo/staffinfo.controller.ts:23",{"_index":587,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["src/modules/staffinfo/staffinfo.controller.ts:29",{"_index":583,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["src/modules/staffinfo/staffinfo.module.ts",{"_index":604,"title":{},"body":{"modules/StaffinfoModule.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts",{"_index":608,"title":{},"body":{"injectables/StaffinfoService.html":{},"coverage.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:11",{"_index":612,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:20",{"_index":614,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:39",{"_index":619,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:44",{"_index":618,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:56",{"_index":621,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/staffinfo/staffinfo.service.ts:65",{"_index":617,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["src/modules/user/dto/login.dto.ts",{"_index":829,"title":{},"body":{"coverage.html":{},"classes/loginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:12",{"_index":949,"title":{},"body":{"classes/loginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:8",{"_index":950,"title":{},"body":{"classes/loginDto.html":{}}}],["src/modules/user/dto/user.dto.ts",{"_index":830,"title":{},"body":{"coverage.html":{},"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:14",{"_index":992,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:19",{"_index":989,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:24",{"_index":994,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:29",{"_index":990,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:34",{"_index":985,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:39",{"_index":986,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:44",{"_index":987,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:49",{"_index":997,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:54",{"_index":988,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:59",{"_index":995,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:63",{"_index":998,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:67",{"_index":993,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:71",{"_index":996,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:9",{"_index":991,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/user.controller.ts",{"_index":664,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:32",{"_index":672,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:44",{"_index":678,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:57",{"_index":686,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":709,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":720,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/user.service.ts:18",{"_index":725,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:32",{"_index":727,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:54",{"_index":732,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:74",{"_index":729,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:84",{"_index":731,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:96",{"_index":737,"title":{},"body":{"injectables/UserService.html":{}}}],["staff",{"_index":223,"title":{},"body":{"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{}}}],["staffcategories",{"_index":381,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["staffcategory",{"_index":70,"title":{"entities/StaffCategory.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"controllers/ConfigureController.html":{},"modules/ConfigureModule.html":{},"injectables/ConfigureService.html":{},"entities/StaffCategory.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["staffcategory.entity",{"_index":967,"title":{},"body":{"entities/staffInfo.html":{}}}],["staffcategory.staffinfo",{"_index":968,"title":{},"body":{"entities/staffInfo.html":{}}}],["staffcategory.staffinfo)@joincolumn",{"_index":965,"title":{},"body":{"entities/staffInfo.html":{}}}],["staffcategoryinfo",{"_index":390,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["staffcategoryrepository",{"_index":411,"title":{},"body":{"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{}}}],["staffinfo",{"_index":67,"title":{"entities/staffInfo.html":{}},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"coverage.html":{},"entities/staffInfo.html":{}}}],["staffinfo.bookingoperationtheater",{"_index":213,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["staffinfo.category",{"_index":629,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["staffinfo.controller",{"_index":606,"title":{},"body":{"modules/StaffinfoModule.html":{}}}],["staffinfo.createdby",{"_index":627,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["staffinfo.service",{"_index":588,"title":{},"body":{"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{}}}],["staffinfo.staffcategory",{"_index":567,"title":{},"body":{"entities/StaffCategory.html":{},"injectables/StaffinfoService.html":{}}}],["staffinfo/staffinfo.service",{"_index":185,"title":{},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{}}}],["staffinfocontroller",{"_index":572,"title":{"controllers/StaffinfoController.html":{}},"body":{"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"coverage.html":{}}}],["staffinfodto",{"_index":578,"title":{"classes/staffInfoDto.html":{}},"body":{"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"coverage.html":{},"classes/staffInfoDto.html":{}}}],["staffinfomodule",{"_index":33,"title":{"modules/StaffinfoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StaffinfoModule.html":{},"modules.html":{},"overview.html":{}}}],["staffinforepository",{"_index":613,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["staffinfoservice",{"_index":181,"title":{"injectables/StaffinfoService.html":{}},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{},"controllers/StaffinfoController.html":{},"modules/StaffinfoModule.html":{},"injectables/StaffinfoService.html":{},"coverage.html":{},"overview.html":{}}}],["start",{"_index":894,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":897,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":899,"title":{},"body":{"index.html":{}}}],["started",{"_index":869,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["starter",{"_index":888,"title":{},"body":{"index.html":{}}}],["state",{"_index":332,"title":{},"body":{"classes/CommonEntity.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["statements",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":430,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["status",{"_index":194,"title":{},"body":{"entities/BookingOperationTheater.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":458,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["stay",{"_index":920,"title":{},"body":{"index.html":{}}}],["store",{"_index":290,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["stote",{"_index":296,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["string",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"classes/CommonEntity.html":{},"injectables/ConfigureService.html":{},"classes/GlobalAccess.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["strongpassword",{"_index":512,"title":{},"body":{"entities/Login.html":{}}}],["success",{"_index":269,"title":{},"body":{"injectables/BookingService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["successimport",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["super('bad",{"_index":123,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('forbidden",{"_index":114,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('not",{"_index":120,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('unauthorized",{"_index":117,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["support",{"_index":912,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":952,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":640,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["swagger_config",{"_index":810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":637,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":267,"title":{},"body":{"injectables/BookingService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":643,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["taken",{"_index":674,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":300,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["tap((response",{"_index":315,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["template",{"_index":1015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":902,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":905,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":904,"title":{},"body":{"index.html":{}}}],["tests",{"_index":901,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":910,"title":{},"body":{"index.html":{}}}],["theater",{"_index":228,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{}}}],["theaterinfo",{"_index":417,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["this.appservice.gethello",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["this.bookingoperationtheater",{"_index":539,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/staffInfo.html":{}}}],["this.bookingoperationtheater.push(bookingoperationtheater",{"_index":542,"title":{},"body":{"entities/OperationTheaterInfo.html":{},"entities/staffInfo.html":{}}}],["this.bookingrepository.delete",{"_index":268,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingrepository.findone",{"_index":264,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingrepository.save(newdata",{"_index":262,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.bookingservice.bookingoperationtheater(data",{"_index":173,"title":{},"body":{"controllers/BookingController.html":{}}}],["this.bookingservice.deletebooking",{"_index":177,"title":{},"body":{"controllers/BookingController.html":{}}}],["this.cachemanager.get('staffcategory",{"_index":388,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["this.cachemanager.set",{"_index":391,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["this.configureservice.getoperationtheaterbyname",{"_index":249,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.configureservice.getoperationtheaterinfo",{"_index":396,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["this.configureservice.getstaffcategory",{"_index":392,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["this.findbycategory(category",{"_index":632,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["this.finduser(tokendata.email",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync",{"_index":944,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":946,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["this.jwtserviceclass.createjwttoken(getuser",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtserviceclass.deletetoken(response",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtserviceclass.verifyjwttoken(token",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log",{"_index":485,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.loginrepository.findone",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["this.manager.get(key",{"_index":309,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.manager.set(key",{"_index":316,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.operationtheaterinforepository.find",{"_index":423,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["this.operationtheaterinforepository.findone",{"_index":424,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["this.password",{"_index":513,"title":{},"body":{"entities/Login.html":{}}}],["this.reflector.get('cache",{"_index":305,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.reflector.get('roles",{"_index":555,"title":{},"body":{"guards/RolesGuards.html":{}}}],["this.staffcategoryrepository.find",{"_index":422,"title":{},"body":{"injectables/ConfigureService.html":{}}}],["this.staffcategoryrepository.findone",{"_index":625,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["this.staffinfo",{"_index":570,"title":{},"body":{"entities/StaffCategory.html":{}}}],["this.staffinfo.push(staffinfo",{"_index":571,"title":{},"body":{"entities/StaffCategory.html":{}}}],["this.staffinforepository.find",{"_index":635,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["this.staffinforepository.findone",{"_index":634,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["this.staffinforepository.save(newdata",{"_index":631,"title":{},"body":{"injectables/StaffinfoService.html":{}}}],["this.staffinfoservice.addstaff(data",{"_index":597,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["this.staffinfoservice.getbyemailandcategory",{"_index":244,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.staffinfoservice.getbyemailandcategory(category",{"_index":601,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["this.staffinfoservice.getstaffbasedoncategory(category",{"_index":599,"title":{},"body":{"controllers/StaffinfoController.html":{}}}],["this.staffinfoservice.getstaffinfobyemail",{"_index":246,"title":{},"body":{"injectables/BookingService.html":{}}}],["this.tovalidate(metatype",{"_index":785,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.save(newdata",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(data",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.loginuser(data",{"_index":704,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.logoutuser(response",{"_index":705,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":251,"title":{},"body":{"injectables/BookingService.html":{},"injectables/ConfigureService.html":{},"injectables/StaffinfoService.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["timestamp",{"_index":459,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":644,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["todate",{"_index":195,"title":{},"body":{"entities/BookingOperationTheater.html":{}}}],["token",{"_index":688,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["tokendata",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["touch",{"_index":921,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":773,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":775,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":774,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":779,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":784,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"classes/CommonEntity.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty",{"_index":495,"title":{},"body":{"entities/Login.html":{}}}],["ttl",{"_index":294,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{}}}],["twitter",{"_index":927,"title":{},"body":{"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookingController.html":{},"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/CommonEntity.html":{},"injectables/ConfigureService.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"entities/staffInfo.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":219,"title":{},"body":{"entities/BookingOperationTheater.html":{},"injectables/BookingService.html":{},"classes/CommonEntity.html":{},"injectables/ConfigureService.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"entities/OperationTheaterInfo.html":{},"entities/StaffCategory.html":{},"injectables/StaffinfoService.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"entities/staffInfo.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig.database",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.host",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.password",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.username",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["typeorminterface",{"_index":646,"title":{"classes/TypeOrmInterface.html":{}},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":187,"title":{},"body":{"modules/BookingModule.html":{}}}],["typeormmodule.forfeature([staffcategory",{"_index":402,"title":{},"body":{"modules/ConfigureModule.html":{}}}],["typeormmodule.forfeature([staffinfo",{"_index":607,"title":{},"body":{"modules/StaffinfoModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":714,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":641,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":794,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":506,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"index.html":{}}}],["ui",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":116,"title":{"classes/Unauthorized.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["unauthorizedexception",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('incorrect",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":357,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":511,"title":{},"body":{"entities/Login.html":{}}}],["unit",{"_index":900,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":148,"title":{},"body":{"controllers/BookingController.html":{},"injectables/BookingService.html":{},"controllers/ConfigureController.html":{},"injectables/ConfigureService.html":{},"controllers/StaffinfoController.html":{},"injectables/StaffinfoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["upadetdtime",{"_index":368,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["updatedat",{"_index":365,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["updatedby",{"_index":336,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["updateddate",{"_index":337,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["updatedtime",{"_index":338,"title":{},"body":{"classes/CommonEntity.html":{},"classes/Maintenance.html":{}}}],["use",{"_index":468,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(request",{"_index":469,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["used",{"_index":183,"title":{},"body":{"modules/BookingModule.html":{},"injectables/BookingService.html":{},"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"entities/StaffCategory.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"entities/staffInfo.html":{},"miscellaneous/variables.html":{}}}],["usefilters",{"_index":691,"title":{},"body":{"controllers/UserController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":63,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"classes/userDto.html":{}}}],["user.controller",{"_index":710,"title":{},"body":{"modules/UserModule.html":{}}}],["user.createdby",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["user.entity",{"_index":500,"title":{},"body":{"entities/Login.html":{}}}],["user.login",{"_index":515,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["user.login)@joincolumn",{"_index":492,"title":{},"body":{"entities/Login.html":{}}}],["user.service",{"_index":694,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["useragent",{"_index":478,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useragent}${ip",{"_index":486,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usercontroller",{"_index":663,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":670,"title":{"classes/userDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/userDto.html":{}}}],["userinfo",{"_index":395,"title":{},"body":{"controllers/ConfigureController.html":{}}}],["usermodule",{"_index":34,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"classes/TypeOrmInterface.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":726,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":693,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":771,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":789,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":692,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/UserController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":371,"title":{},"body":{"classes/CommonEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/staffInfoDto.html":{},"classes/userDto.html":{}}}],["value",{"_index":288,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"controllers/ConfigureController.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":508,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["variable",{"_index":431,"title":{},"body":{"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":999,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":943,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifyjwttoken",{"_index":933,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifyjwttoken(token",{"_index":941,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifytoken",{"_index":945,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["version",{"_index":645,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["watch",{"_index":895,"title":{},"body":{"index.html":{}}}],["website",{"_index":925,"title":{},"body":{"index.html":{}}}],["worked",{"_index":556,"title":{},"body":{"guards/RolesGuards.html":{}}}],["world",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":915,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/BookingModule.html":{},"modules/ConfigureModule.html":{},"modules/StaffinfoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is dummy class\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * This is dummy class\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nBookingModule\n\nBookingModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingModule->AppModule\n\n\n\n\n\nConfigureModule\n\nConfigureModule\n\nAppModule -->\n\nConfigureModule->AppModule\n\n\n\n\n\nStaffinfoModule\n\nStaffinfoModule\n\nAppModule -->\n\nStaffinfoModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BookingModule\n                        \n                        \n                            ConfigureModule\n                        \n                        \n                            StaffinfoModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmConfig } from './Config/TypeOrm/typeorm.config';\nimport { LoggerMiddleware } from './Common/MiddleWare/logger.middleware';\nimport { UserModule } from './Modules/user/user.module';\nimport { User } from './Entities/user.entity';\nimport { Login } from './Entities/login.entity';\nimport { staffInfo } from './Entities/staff-info.entity';\nimport { StaffCategory } from './Entities/staffCategory.entity';\nimport { OperationTheaterInfo } from './Entities/operationTheaterInfo.entity';\nimport { BookingOperationTheater } from './Entities/Booking.entity';\nimport { StaffinfoModule } from './Modules/staffinfo/staffinfo.module';\nimport { ConfigureModule } from './Modules/configure/configure.module';\nimport { BookingModule } from './Modules/booking/booking.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: TypeOrmConfig.host,\n      port: TypeOrmConfig.port,\n      username: TypeOrmConfig.username,\n      password: TypeOrmConfig.password,\n      database: TypeOrmConfig.database,\n      entities: [\n        staffInfo,\n        User,\n        Login,\n        StaffCategory,\n        OperationTheaterInfo,\n        BookingOperationTheater\n      ],\n      //autoLoadEntities: true,\n      synchronize: true\n    }),\n    UserModule,\n    ConfigureModule,\n    StaffinfoModule,\n    BookingModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is dummy class\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * This is dummy class\n */\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequest.html":{"url":"classes/BadRequest.html","title":"class - BadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom BadRequest Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:36\n                            \n                        \n\n                \n                    \n                            This is a  BadRequest constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookingController.html":{"url":"controllers/BookingController.html","title":"controller - BookingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/booking/booking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                booking\n            \n\n\n            \n                Description\n            \n            \n                This is a bookig related controller all apis coding ia avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookingOperationTheater\n                            \n                            \n                                    Async\n                                deleteBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bookingOperationTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingOperationTheater(data: BookingOperationTheater, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(recption)@Post('bookingOperationTheater/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/booking/booking.controller.ts:17\n                \n            \n\n\n            \n                \n                    post method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BookingOperationTheater\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(optName: string, operationName: string, createdDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('deleteBooking/:optName/:operationName/:createdDate')\n                \n            \n\n            \n                \n                    Defined in src/Modules/booking/booking.controller.ts:26\n                \n            \n\n\n            \n                \n                    Delete method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    operationName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createdDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Param, Post } from '@nestjs/common';\nimport { BookingService } from './booking.service';\nimport { BookingOperationTheater } from './../../Entities/Booking.entity';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Roles } from 'src/Common/Decorators/roles.decorator';\nimport { recption, Doctor } from './../../Common/constant/role.constant';\n\n/**This is a bookig related controller all apis coding ia avaliable here */\n@ApiTags('booking')\n@Controller('booking')\nexport class BookingController {\n  constructor(private readonly bookingService: BookingService) {}\n\n  /**post method */\n  @Roles(recption)\n  @Post('bookingOperationTheater/:email')\n  async bookingOperationTheater(\n    @Body() data: BookingOperationTheater,\n    @Param('email') email: string\n  ) {\n    return await this.bookingService.bookingOperationTheater(data, email);\n  }\n\n  /**Delete method */\n  @Delete('deleteBooking/:optName/:operationName/:createdDate')\n  async deleteBooking(\n    @Param('optName') optName: string,\n    @Param('operationName') operationName: string,\n    @Param('createdDate') createdDate: string\n  ) {\n    return await this.bookingService.deleteBooking(\n      optName,\n      operationName,\n      createdDate\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookingModule.html":{"url":"modules/BookingModule.html","title":"module - BookingModule","body":"\n                   \n\n\n\n\n    Modules\n    BookingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BookingModule\n\n\n\ncluster_BookingModule_providers\n\n\n\n\nBookingService\n\nBookingService\n\n\n\nBookingModule\n\nBookingModule\n\nBookingModule -->\n\nBookingService->BookingModule\n\n\n\n\n\nConfigureService\n\nConfigureService\n\nBookingModule -->\n\nConfigureService->BookingModule\n\n\n\n\n\nStaffinfoService\n\nStaffinfoService\n\nBookingModule -->\n\nStaffinfoService->BookingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/booking/booking.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This module is used to configure the booking\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookingService\n                        \n                        \n                            ConfigureService\n                        \n                        \n                            StaffinfoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BookingController } from './booking.controller';\nimport { BookingService } from './booking.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { BookingOperationTheater } from './../../Entities/Booking.entity';\nimport { StaffinfoService } from './../staffinfo/staffinfo.service';\nimport { ConfigureService } from './../configure/configure.service';\nimport { staffInfo } from './../../Entities/staff-info.entity';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\nimport { OperationTheaterInfo } from './../../Entities/operationTheaterInfo.entity';\n\n/**This module is used to configure the booking */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      BookingOperationTheater,\n      staffInfo,\n      StaffCategory,\n      OperationTheaterInfo\n    ])\n  ],\n\n  controllers: [BookingController],\n  providers: [BookingService, StaffinfoService, ConfigureService]\n})\nexport class BookingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/BookingOperationTheater.html":{"url":"entities/BookingOperationTheater.html","title":"entity - BookingOperationTheater","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  BookingOperationTheater\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/Booking.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is BookingOperationTheater entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                doctoremail\n                            \n                            \n                                fromDate\n                            \n                            \n                                id\n                            \n                            \n                                operationName\n                            \n                            \n                                operationtheaterInfo\n                            \n                            \n                                optname\n                            \n                            \n                                staffinfo\n                            \n                            \n                                status\n                            \n                            \n                                toDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        doctoremail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:17\n                        \n                    \n\n            \n                \n                    doctor name generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:27\n                        \n                    \n\n            \n                \n                    fromDate generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:12\n                        \n                    \n\n            \n                \n                    primary generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        operationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:37\n                        \n                    \n\n            \n                \n                    operationName generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        operationtheaterInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OperationTheaterInfo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, operationtheaterInfo => operationtheaterInfo.bookingoperationTheater)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:48\n                        \n                    \n\n            \n                \n                    many to one relation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        optname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:22\n                        \n                    \n\n            \n                \n                    optname generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        staffinfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         staffInfo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, staffinfo => staffinfo.bookingoperationTheater)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:52\n                        \n                    \n\n            \n                \n                    many to one relation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/Booking.entity.ts:32\n                        \n                    \n\n            \n                \n                    toDate generated column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Maintenance } from './maintanance.entity';\nimport { OperationTheaterInfo } from './operationTheaterInfo.entity';\nimport { staffInfo } from './staff-info.entity';\n\n/**This is BookingOperationTheater entity*/\n@Entity()\nexport class BookingOperationTheater extends Maintenance {\n  /**primary generated column */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**doctor name generated column */\n  @Column()\n  @ApiProperty()\n  doctoremail: string;\n\n  /**optname generated column */\n  @Column()\n  @ApiProperty()\n  optname: string;\n\n  /**fromDate generated column */\n  @Column()\n  @ApiProperty()\n  fromDate: string;\n\n  /**toDate generated column */\n  @Column()\n  @ApiProperty()\n  toDate: string;\n\n  /**operationName generated column */\n  @Column()\n  @ApiProperty()\n  operationName: string;\n\n  @Column()\n  @ApiProperty()\n  status: string;\n\n  /**many to one relation */\n  @ManyToOne(\n    () => OperationTheaterInfo,\n    (operationtheaterInfo) => operationtheaterInfo.bookingoperationTheater\n  )\n  operationtheaterInfo: OperationTheaterInfo;\n\n  /**many to one relation */\n  @ManyToOne(() => staffInfo, (staffinfo) => staffinfo.bookingoperationTheater)\n  staffinfo: staffInfo;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookingService.html":{"url":"injectables/BookingService.html","title":"injectable - BookingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/booking/booking.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This service is used to book the operation theater\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                bookingOperationTheater\n                            \n                            \n                                    Async\n                                deleteBooking\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookingRepository: Repository, staffinfoService: StaffinfoService, configureService: ConfigureService)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/booking/booking.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        staffinfoService\n                                                  \n                                                        \n                                                                        StaffinfoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configureService\n                                                  \n                                                        \n                                                                        ConfigureService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        bookingOperationTheater\n                        \n                    \n                \n            \n            \n                \n                    \n                    bookingOperationTheater(data: BookingOperationTheater, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/booking/booking.service.ts:30\n                \n            \n\n\n            \n                \n                    This method is used to book the operation theater\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                BookingOperationTheater\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteBooking\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteBooking(optName: string, operationName: string, createdDate: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/booking/booking.service.ts:59\n                \n            \n\n\n            \n                \n                    This method is used to delete the operation theater if already booked\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    operationName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createdDate\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { BookingOperationTheater } from './../../Entities/Booking.entity';\nimport { StaffinfoService } from './../staffinfo/staffinfo.service';\nimport { ConfigureService } from './../configure/configure.service';\nimport { OperationTheaterInfo } from './../../Entities/operationTheaterInfo.entity';\nimport { recption } from './../../Common/constant/role.constant';\nimport { staffInfo } from './../../Entities/staff-info.entity';\n\n/**\n * This service is used to book the operation theater\n */\n@Injectable()\nexport class BookingService {\n  constructor(\n    @InjectRepository(BookingOperationTheater)\n    private readonly bookingRepository: Repository,\n    private readonly staffinfoService: StaffinfoService,\n    private readonly configureService: ConfigureService\n  ) {}\n\n  /**\n   * This method is used to book the operation theater\n   */\n  async bookingOperationTheater(data: BookingOperationTheater, email: string) {\n    const getRecption = await this.staffinfoService.getByEmailAndCategory(\n      recption,\n      email\n    );\n    const getDoctor = await this.staffinfoService.getstaffInfoByEmail(\n      data.doctoremail\n    );\n    const getTheater = await this.configureService.getOperationTheaterByName(\n      data.optname\n    );\n    if (!getDoctor || !getTheater || !getRecption) {\n      throw new BadRequestException('enter details are incorrect');\n    }\n    const booking = new BookingOperationTheater();\n    let theater = new OperationTheaterInfo();\n    let staff = new staffInfo();\n    staff = getDoctor;\n    theater = getTheater;\n    booking.createdBy = getRecption.lastname;\n    booking.staffinfo = staff;\n    booking.operationtheaterInfo = theater;\n    const newData = Object.assign(booking, data);\n    return await this.bookingRepository.save(newData);\n  }\n\n  /**\n   * This method is used to delete the operation theater if already booked\n   */\n  async deleteBooking(\n    optName: string,\n    operationName: string,\n    createdDate: string\n  ) {\n    const getBookingInfo = await this.bookingRepository.findOne({\n      optname: optName,\n      operationName: operationName,\n      createdDate: createdDate\n    });\n    if (!getBookingInfo) {\n      throw new NotFoundException('not record found in booking table');\n    }\n    await this.bookingRepository.delete({\n      optname: optName,\n      operationName: operationName,\n      createdDate: createdDate\n    });\n    return 'delete success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheManagerInterceptor.html":{"url":"injectables/CacheManagerInterceptor.html","title":"injectable - CacheManagerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheManagerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/interceptor/cache-manager.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a chche manager interceptor class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                manager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/Common/interceptor/cache-manager.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            this is constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/interceptor/cache-manager.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    async interceptor method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : cacheManager.caching({ store: 'memory', max: 100, ttl: 10 })\n                    \n                \n                    \n                        \n                                Defined in src/Common/interceptor/cache-manager.interceptor.ts:17\n                        \n                    \n\n            \n                \n                    This is used to stote the cache value\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\nimport * as cacheManager from 'cache-manager';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * This is a chche manager interceptor class\n */\n@Injectable()\nexport class CacheManagerInterceptor implements NestInterceptor {\n  /**This is used to stote the cache value */\n  manager = cacheManager.caching({ store: 'memory', max: 100, ttl: 10 });\n  /**this is constructor */\n  constructor(private reflector: Reflector) {}\n\n  /**async interceptor method */\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler\n  ): Promise> {\n    const key = this.reflector.get('cache-key', context.getHandler());\n\n    /**This is cached constant */\n    const cached: any = await this.manager.get(key);\n\n    /**If cache is there retun the save */\n    if (cached) {\n      return cached;\n    }\n    /**final response */\n    return next.handle().pipe(\n      tap((response) => {\n        this.manager.set(key, response);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommonEntity.html":{"url":"classes/CommonEntity.html","title":"class - CommonEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommonEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/common.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is common entity all common feilds are avaliabale here\n\n            \n\n            \n                Extends\n            \n            \n                        Maintenance\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addAddressLine1\n                            \n                            \n                                addAddressLine2\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                dateofbirth\n                            \n                            \n                                emailid\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                phonenumber\n                            \n                            \n                                pincode\n                            \n                            \n                                state\n                            \n                            \n                                createdBy\n                            \n                            \n                                createdDate\n                            \n                            \n                                createdTime\n                            \n                            \n                                isActive\n                            \n                            \n                                updatedBy\n                            \n                            \n                                updatedDate\n                            \n                            \n                                updatedTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:35\n                        \n                    \n\n            \n                \n                    addAddressLine1 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:40\n                        \n                    \n\n            \n                \n                    addAddressLine2 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:45\n                        \n                    \n\n            \n                \n                    city generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:55\n                        \n                    \n\n            \n                \n                    country generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateofbirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:20\n                        \n                    \n\n            \n                \n                    dateofbirth generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:30\n                        \n                    \n\n            \n                \n                    emailid generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:10\n                        \n                    \n\n            \n                \n                    firstname generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:15\n                        \n                    \n\n            \n                \n                    lastname generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phonenumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:25\n                        \n                    \n\n            \n                \n                    phonenumber generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:60\n                        \n                    \n\n            \n                \n                    pincode generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/common.entity.ts:50\n                        \n                    \n\n            \n                \n                    state generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:21\n\n                        \n                    \n\n            \n                \n                    generates createdAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:31\n\n                        \n                    \n\n            \n                \n                    generates createdate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:37\n\n                        \n                    \n\n            \n                \n                    generates createTime column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:11\n\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:16\n\n                        \n                    \n\n            \n                \n                    generates updatedAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:26\n\n                        \n                    \n\n            \n                \n                    generates updatedDate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Maintenance\n\n                            \n                        \n                    \n                        \n                                Defined in         Maintenance:43\n\n                        \n                    \n\n            \n                \n                    generates UpadetdTime column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\nimport { Column } from 'typeorm';\nimport { Maintenance } from './maintanance.entity';\n\n/**This is common entity all common feilds are avaliabale here */\nexport class CommonEntity extends Maintenance {\n  /**firstname generated column */\n  @Column()\n  @IsString()\n  firstname: string;\n\n  /**lastname generated column */\n  @Column()\n  @IsString()\n  lastname: string;\n\n  /**dateofbirth generated column */\n  @Column()\n  @IsString()\n  dateofbirth: string;\n\n  /**phonenumber generated column */\n  @Column()\n  @IsString()\n  phonenumber: string;\n\n  /**emailid generated column */\n  @Column()\n  @IsString()\n  emailid: string;\n\n  /**addAddressLine1 generated column */\n  @Column()\n  @IsString()\n  addAddressLine1: string;\n\n  /**addAddressLine2 generated column */\n  @Column()\n  @IsString()\n  addAddressLine2: string;\n\n  /**city generated column */\n  @Column()\n  @IsString()\n  city: string;\n\n  /**state generated column */\n  @Column()\n  @IsString()\n  state: string;\n\n  /**country generated column */\n  @Column()\n  @IsString()\n  country: string;\n\n  /**pincode generated column */\n  @Column()\n  @IsInt()\n  pincode: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConfigureController.html":{"url":"controllers/ConfigureController.html","title":"controller - ConfigureController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConfigureController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/configure/configure.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                configure\n            \n\n\n            \n                Description\n            \n            \n                This is a helper controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getoperationTheaterInfo\n                            \n                            \n                                    Async\n                                getStaffCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getoperationTheaterInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getoperationTheaterInfo()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('operationTheaterInfo')\n                \n            \n\n            \n                \n                    Defined in src/Modules/configure/configure.controller.ts:43\n                \n            \n\n\n            \n                \n                    This method is used to get the all operationTheaterInfo\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStaffCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStaffCategory()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('StaffCategory')\n                \n            \n\n            \n                \n                    Defined in src/Modules/configure/configure.controller.ts:20\n                \n            \n\n\n            \n                \n                    This method is used to get the all StaffCategories\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { CACHE_MANAGER, Controller, Get, Inject } from '@nestjs/common';\nimport { ConfigureService } from './configure.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Cache } from 'cache-manager';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\n\n/**\n * This is a helper controller\n */\n@ApiTags('StaffCategory && operationTheaterInfo')\n@Controller('configure')\nexport class ConfigureController {\n  constructor(private readonly configureService: ConfigureService) {}\n  @Inject(CACHE_MANAGER) private cacheManager: Cache;\n\n  /**\n   * This method is used to get the all StaffCategories\n   */\n  @Get('StaffCategory')\n  async getStaffCategory() {\n    const value = await this.cacheManager.get('StaffCategory');\n    if (value) {\n      return {\n        dataFrom: 'From Cache',\n        StaffCategoryInfo: value\n      };\n    }\n    await this.cacheManager.set(\n      'StaffCategory',\n      this.configureService.getStaffCategory(),\n      { ttl: 1000 }\n    );\n    return {\n      dataFrom: 'My Fake Database',\n      userInfo: await this.configureService.getStaffCategory()\n    };\n  }\n\n  /**\n   * This method is used to get the all operationTheaterInfo\n   */\n  @Get('operationTheaterInfo')\n  async getoperationTheaterInfo() {\n    await this.cacheManager.set(\n      'key',\n      this.configureService.getoperationTheaterInfo(),\n      { ttl: 1000 }\n    );\n    return {\n      dataFrom: 'My Fake Database',\n      userInfo: await this.configureService.getStaffCategory()\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigureModule.html":{"url":"modules/ConfigureModule.html","title":"module - ConfigureModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigureModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigureModule\n\n\n\ncluster_ConfigureModule_providers\n\n\n\n\nConfigureService\n\nConfigureService\n\n\n\nConfigureModule\n\nConfigureModule\n\nConfigureModule -->\n\nConfigureService->ConfigureModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/configure/configure.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Configure module\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigureService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConfigureController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { ConfigureService } from './configure.service';\nimport { ConfigureController } from './configure.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OperationTheaterInfo } from './../../Entities/operationTheaterInfo.entity';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\n\n/**Configure module */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([StaffCategory, OperationTheaterInfo]),\n    CacheModule.register()\n  ],\n\n  providers: [ConfigureService],\n  controllers: [ConfigureController]\n})\nexport class ConfigureModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigureService.html":{"url":"injectables/ConfigureService.html","title":"injectable - ConfigureService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/configure/configure.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a helper service class all helper related business logics are avaliable here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getOperationTheaterByName\n                            \n                            \n                                    Async\n                                getoperationTheaterInfo\n                            \n                            \n                                    Async\n                                getStaffCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(staffCategoryRepository: Repository, operationTheaterInfoRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/configure/configure.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        staffCategoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        operationTheaterInfoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOperationTheaterByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOperationTheaterByName(operationTheaterName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/configure/configure.service.ts:40\n                \n            \n\n\n            \n                \n                    get data by theater name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    operationTheaterName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getoperationTheaterInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getoperationTheaterInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/configure/configure.service.ts:31\n                \n            \n\n\n            \n                \n                    This method is to fetch TheaterInfo\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStaffCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStaffCategory()\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/configure/configure.service.ts:23\n                \n            \n\n\n            \n                \n                    This method is to fetch all categories\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\nimport { OperationTheaterInfo } from './../../Entities/operationTheaterInfo.entity';\n\n/**\n * This is a helper service class all helper related business logics are avaliable here\n */\n@Injectable()\nexport class ConfigureService {\n  constructor(\n    @InjectRepository(StaffCategory)\n    private readonly staffCategoryRepository: Repository,\n    @InjectRepository(OperationTheaterInfo)\n    private readonly operationTheaterInfoRepository: Repository\n  ) {}\n\n  /**\n   * This method is to fetch all categories\n   * @returns\n   */\n  async getStaffCategory() {\n    return await this.staffCategoryRepository.find();\n  }\n\n  /**\n   * This method is to fetch TheaterInfo\n   * @returns\n   */\n  async getoperationTheaterInfo() {\n    return await this.operationTheaterInfoRepository.find();\n  }\n\n  /**\n   * get data by theater name\n   * @param operationTheaterName\n   * @returns\n   */\n  async getOperationTheaterByName(operationTheaterName: string) {\n    const getTheater = await this.operationTheaterInfoRepository.findOne({\n      operationTheaterName: operationTheaterName\n    });\n    if (!getTheater) {\n      throw new BadRequestException('enter theater name is not found');\n    }\n    return getTheater;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForbiddenException.html":{"url":"classes/ForbiddenException.html","title":"class - ForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom forbidden Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:6\n                            \n                        \n\n                \n                    \n                            This is a  Forbidden constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalAccess.html":{"url":"classes/GlobalAccess.html","title":"class - GlobalAccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalAccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Access/global.access.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to set the role in static variable\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ' '\n                    \n                \n                    \n                        \n                                Defined in src/Common/Access/global.access.ts:4\n                        \n                    \n\n            \n                \n                    static variable\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GlobalAccess {\n  /**static variable */\n  static role = ' ';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to find the exceptions for entire project\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n                    This class is used to find the exceptions for entire project\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n/**\n * This class is used to find the exceptions for entire project\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * This class is used to find the exceptions for entire project\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    /**\n     * Based on abouve constants below method is implemeted\n     */\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/MiddleWare/logger.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to return the logger related info based on middleware\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/MiddleWare/logger.middleware.ts:11\n                \n            \n\n\n            \n                \n                    This method is used to return the loggin info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggerMiddleware.name)\n                    \n                \n                    \n                        \n                                Defined in src/Common/MiddleWare/logger.middleware.ts:9\n                        \n                    \n\n            \n                \n                    This is a private variable\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n/**\n * This method is used to return the logger related info based on middleware\n */\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  /**This is a private variable */\n  private logger = new Logger(LoggerMiddleware.name);\n  /**This method is used to return the loggin info */\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n      this.logger.log(\n        'info',\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n    });\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Login.html":{"url":"entities/Login.html","title":"entity - Login","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/login.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:23\n                        \n                    \n\n            \n                \n                    This is primary generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:33\n                        \n                    \n\n            \n                \n                    password column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:38\n                        \n                    \n\n            \n                \n                    password column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.login)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:49\n                        \n                    \n\n            \n                \n                    one to one  relation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:28\n                        \n                    \n\n            \n                \n                    username column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Maintenance } from './maintanance.entity';\nimport { User } from './user.entity';\n/**This bcrypt is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n\n/**\n * This is login entity\n */\n@Entity()\nexport class Login extends Maintenance {\n  /**This is primary generated column */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**username column */\n  @Column({ unique: true })\n  @ApiProperty()\n  username: string;\n\n  /**password column */\n  @Column()\n  @ApiProperty()\n  password: string;\n\n  /**password column */\n  @Column()\n  @ApiProperty()\n  role: string;\n\n  /**this method is used to hash the password*/\n  @BeforeInsert()\n  async strongPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n\n  /**one to one  relation */\n  @OneToOne(() => User, (user) => user.login)\n  @JoinColumn()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Maintenance.html":{"url":"classes/Maintenance.html","title":"class - Maintenance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Maintenance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/maintanance.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a maintenance entity all maintanance related columns are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdBy\n                            \n                            \n                                createdDate\n                            \n                            \n                                createdTime\n                            \n                            \n                                isActive\n                            \n                            \n                                updatedBy\n                            \n                            \n                                updatedDate\n                            \n                            \n                                updatedTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:21\n                        \n                    \n\n            \n                \n                    generates createdAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:31\n                        \n                    \n\n            \n                \n                    generates createdate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:37\n                        \n                    \n\n            \n                \n                    generates createTime column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:11\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:16\n                        \n                    \n\n            \n                \n                    generates updatedAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:26\n                        \n                    \n\n            \n                \n                    generates updatedDate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:43\n                        \n                    \n\n            \n                \n                    generates UpadetdTime column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column } from 'typeorm';\n\n/**\n * This is a maintenance entity all maintanance related columns are avaliable here\n */\nexport class Maintenance {\n  /**\n   * generates isActive column\n   */\n  @Column({ default: true })\n  isActive: boolean;\n  /**\n   *generates updatedAt column\n   */\n  @Column({ default: ' ' })\n  updatedBy: string;\n  /**\n   *generates createdAt column\n   */\n  @Column()\n  createdBy: string;\n  /**\n   *generates updatedDate column\n   */\n  @Column({ default: ' ' })\n  updatedDate: string;\n  /**\n   * generates createdate column\n   */\n  @Column({ default: new Date().toLocaleDateString() })\n  createdDate: string;\n\n  /**\n   * generates createTime column\n   */\n  @Column({ default: new Date().toLocaleTimeString() })\n  createdTime: string;\n\n  /**\n   * generates UpadetdTime column\n   */\n  @Column({ default: ' ' })\n  updatedTime: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFound.html":{"url":"classes/NotFound.html","title":"class - NotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom NotFound Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:26\n                            \n                        \n\n                \n                    \n                            This is a  NotFound constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OperationTheaterInfo.html":{"url":"entities/OperationTheaterInfo.html","title":"entity - OperationTheaterInfo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OperationTheaterInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/operationTheaterInfo.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                this is OperationTheaterInfo entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bookingoperationTheater\n                            \n                            \n                                id\n                            \n                            \n                                operationTheaterName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bookingoperationTheater\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingOperationTheater[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, bookingoperationTheater => bookingoperationTheater.operationtheaterInfo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/operationTheaterInfo.entity.ts:21\n                        \n                    \n\n            \n                \n                    one to many\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/operationTheaterInfo.entity.ts:10\n                        \n                    \n\n            \n                \n                    this is primary generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        operationTheaterName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/operationTheaterInfo.entity.ts:14\n                        \n                    \n\n            \n                \n                    operationTheaterName column\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { Maintenance } from './maintanance.entity';\nimport { BookingOperationTheater } from './Booking.entity';\n\n/**this is OperationTheaterInfo entity*/\n@Entity()\nexport class OperationTheaterInfo extends Maintenance {\n  /**this is primary generated column */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**operationTheaterName column */\n  @Column()\n  operationTheaterName: string;\n\n  /**one to many */\n  @OneToMany(\n    () => BookingOperationTheater,\n    (bookingoperationTheater) => bookingoperationTheater.operationtheaterInfo\n  )\n  bookingoperationTheater: BookingOperationTheater[];\n\n  /**push data to  bookingoperationTheater*/\n  addbookingInfo(bookingoperationTheater: BookingOperationTheater) {\n    if (this.bookingoperationTheater == null) {\n      this.bookingoperationTheater = new Array();\n    }\n    return this.bookingoperationTheater.push(bookingoperationTheater);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuards.html":{"url":"guards/RolesGuards.html","title":"guard - RolesGuards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/Common/Guards/roles.guards.ts\n            \n\n\n                \n                Description\n                \n                \n                    This is a roles guards file this file is used to protuct the apis\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Guards/roles.guards.ts:12\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Guards/roles.guards.ts:16\n                \n            \n\n\n            \n                \n                    This method is used to protuct the apis\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { GlobalAccess } from '../Access/global.access';\nimport { Admin } from '../constant/role.constant';\nimport { recption, Doctor } from './../constant/role.constant';\n\n/**\n * This is a roles guards file this file is used to protuct the apis\n */\n@Injectable()\nexport class RolesGuards implements CanActivate {\n  /**constructor */\n  constructor(private readonly reflector: Reflector) {}\n  /**This method is used to protuct the apis */\n  canActivate(\n    context: ExecutionContext\n  ): boolean | Promise | Observable {\n    /**This constant is used to get the roles */\n    const roles = this.reflector.get('roles', context.getHandler());\n    /**if roles avaliabale return the save */\n    if (!roles) {\n      return true;\n    }\n    /**If role is admin this method is worked */\n    if (roles.includes(Admin) && GlobalAccess.role === Admin) {\n      return true;\n    }\n    /**If role is recption this method is worked */\n    if (roles.includes(recption) && GlobalAccess.role === recption) {\n      return true;\n    }\n    /**If role is Doctor this method is worked */\n    if (roles.includes(Doctor) && GlobalAccess.role === Doctor) {\n      return true;\n    }\n    /**return the output */\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StaffCategory.html":{"url":"entities/StaffCategory.html","title":"entity - StaffCategory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StaffCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/staffCategory.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is StaffCategory entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Categoryname\n                            \n                            \n                                id\n                            \n                            \n                                staffinfo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Categoryname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staffCategory.entity.ts:13\n                        \n                    \n\n            \n                \n                    Categoryname column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staffCategory.entity.ts:10\n                        \n                    \n\n            \n                \n                    primary generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        staffinfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         staffInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, staffinfo => staffinfo.staffcategory)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staffCategory.entity.ts:17\n                        \n                    \n\n            \n                \n                    one to one relation\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn, OneToMany } from 'typeorm';\nimport { staffInfo } from './staff-info.entity';\nimport { Maintenance } from './maintanance.entity';\n\n/**This is StaffCategory entity */\n@Entity()\nexport class StaffCategory extends Maintenance {\n  /**primary generated column */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**Categoryname column */\n  @Column()\n  Categoryname: string;\n\n  /**one to one relation */\n  @OneToMany(() => staffInfo, (staffinfo) => staffinfo.staffcategory)\n  staffinfo: staffInfo[];\n\n  /**This method is used to push the data */\n  addstaffinfo(staffinfo: staffInfo) {\n    if (this.staffinfo == null) {\n      this.staffinfo = new Array();\n    }\n    return this.staffinfo.push(staffinfo);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StaffinfoController.html":{"url":"controllers/StaffinfoController.html","title":"controller - StaffinfoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StaffinfoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/staffinfo/staffinfo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                staffinfo\n            \n\n\n            \n                Description\n            \n            \n                This is a staff info controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addStaff\n                            \n                            \n                                    Async\n                                getByEmailAndCategory\n                            \n                            \n                                    Async\n                                getStaffBasedOnCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addStaff\n                        \n                    \n                \n            \n            \n                \n                    \n                    addStaff(data: staffInfoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Admin)@Post('addStaff')\n                \n            \n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.controller.ts:17\n                \n            \n\n\n            \n                \n                    post method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                staffInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmailAndCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmailAndCategory(category: string, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getByEmailAndCategory/:category/:email')\n                \n            \n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.controller.ts:29\n                \n            \n\n\n            \n                \n                    get method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStaffBasedOnCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStaffBasedOnCategory(category: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getStaffBasedOnCategory/:category')\n                \n            \n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.controller.ts:23\n                \n            \n\n\n            \n                \n                    get method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { StaffinfoService } from './staffinfo.service';\nimport { staffInfoDto } from './dto/staff.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Roles } from './../../Common/Decorators/roles.decorator';\nimport { Admin } from 'src/Common/constant/role.constant';\n\n/**This is a staff info controller */\n@ApiTags('staff related')\n@Controller('staffinfo')\nexport class StaffinfoController {\n  constructor(private readonly staffinfoService: StaffinfoService) {}\n\n  /**post method */\n  @Roles(Admin)\n  @Post('addStaff')\n  async addStaff(@Body() data: staffInfoDto) {\n    return await this.staffinfoService.addStaff(data);\n  }\n\n  /**get method */\n  @Get('getStaffBasedOnCategory/:category')\n  async getStaffBasedOnCategory(@Param('category') category: string) {\n    return this.staffinfoService.getStaffBasedOnCategory(category);\n  }\n\n  /**get method */\n  @Get('getByEmailAndCategory/:category/:email')\n  async getByEmailAndCategory(\n    @Param('category') category: string,\n    @Param('email') email: string\n  ) {\n    return this.staffinfoService.getByEmailAndCategory(category, email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StaffinfoModule.html":{"url":"modules/StaffinfoModule.html","title":"module - StaffinfoModule","body":"\n                   \n\n\n\n\n    Modules\n    StaffinfoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StaffinfoModule\n\n\n\ncluster_StaffinfoModule_providers\n\n\n\n\nStaffinfoService\n\nStaffinfoService\n\n\n\nStaffinfoModule\n\nStaffinfoModule\n\nStaffinfoModule -->\n\nStaffinfoService->StaffinfoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/staffinfo/staffinfo.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            staff info module all configurations are avaliable here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StaffinfoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StaffinfoController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StaffinfoController } from './staffinfo.controller';\nimport { StaffinfoService } from './staffinfo.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\nimport { staffInfo } from './../../Entities/staff-info.entity';\n\n/**staff info module all configurations are avaliable here */\n@Module({\n  imports: [TypeOrmModule.forFeature([staffInfo, StaffCategory])],\n\n  controllers: [StaffinfoController],\n  providers: [StaffinfoService]\n})\nexport class StaffinfoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StaffinfoService.html":{"url":"injectables/StaffinfoService.html","title":"injectable - StaffinfoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StaffinfoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/staffinfo/staffinfo.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a staff info service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addStaff\n                            \n                            \n                                    Async\n                                findBYCategory\n                            \n                            \n                                    Async\n                                getByEmailAndCategory\n                            \n                            \n                                    Async\n                                getStaffBasedOnCategory\n                            \n                            \n                                    Async\n                                getstaffInfoByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(staffInfoRepository: Repository, staffCategoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/staffinfo/staffinfo.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        staffInfoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        staffCategoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addStaff\n                        \n                    \n                \n            \n            \n                \n                    \n                    addStaff(data: staffInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.service.ts:20\n                \n            \n\n\n            \n                \n                    This is add staff method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                staffInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findBYCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    findBYCategory(category: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.service.ts:65\n                \n            \n\n\n            \n                \n                    get staff by category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmailAndCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmailAndCategory(category: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.service.ts:44\n                \n            \n\n\n            \n                \n                    get staff info based on email and category name\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getStaffBasedOnCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStaffBasedOnCategory(category: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.service.ts:39\n                \n            \n\n\n            \n                \n                    get staff based on category\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getstaffInfoByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getstaffInfoByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/staffinfo/staffinfo.service.ts:56\n                \n            \n\n\n            \n                \n                    get staff by email\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { staffInfo } from './../../Entities/staff-info.entity';\nimport { staffInfoDto } from './dto/staff.dto';\nimport { StaffCategory } from './../../Entities/staffCategory.entity';\nimport { NotFound } from './../../Common/Filters/custom.exception';\n\n/**This is a staff info service */\n@Injectable()\nexport class StaffinfoService {\n  constructor(\n    @InjectRepository(staffInfo)\n    private readonly staffInfoRepository: Repository,\n    @InjectRepository(StaffCategory)\n    private readonly staffCategoryRepository: Repository\n  ) {}\n\n  /**This is add staff method */\n  async addStaff(data: staffInfoDto) {\n    const getCategory = await this.staffCategoryRepository.findOne({\n      Categoryname: data.Categoryname\n    });\n    const staffinfo = new staffInfo();\n    let staffCategory = new StaffCategory();\n    if (!getCategory) {\n      throw new NotFound();\n    } else {\n      staffCategory = getCategory;\n      staffinfo.createdBy = data.firstname;\n      staffinfo.staffcategory = staffCategory;\n      staffinfo.category = data.Categoryname;\n      const newData = Object.assign(staffinfo, data);\n      return await this.staffInfoRepository.save(newData);\n    }\n  }\n\n  /**get staff based on category */\n  async getStaffBasedOnCategory(category: string) {\n    return await this.findBYCategory(category);\n  }\n\n  /**get staff info based on email and category name */\n  async getByEmailAndCategory(category: string, email: string) {\n    const getData = await this.staffInfoRepository.findOne({\n      category: category,\n      emailid: email\n    });\n    if (!getData) {\n      throw new NotFound();\n    }\n    return getData;\n  }\n\n  /**get staff by email */\n  async getstaffInfoByEmail(email: string) {\n    const getData = await this.staffInfoRepository.findOne({ emailid: email });\n    if (!getData) {\n      throw new NotFound();\n    }\n    return getData;\n  }\n\n  /**get staff by category */\n  async findBYCategory(category: string) {\n    const getCategory = await this.staffInfoRepository.find({\n      category: category\n    });\n    if (!getCategory) {\n      throw new NotFound();\n    }\n    return getCategory;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/Swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                swagger related types is declared here\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Tags\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            Version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Description for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Tags for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a title for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Version for swagger\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  /**This is a title for swagger */\n  Title: string;\n  /**This is a Description for swagger */\n  Description: string;\n  /**This is a Version for swagger */\n  Version: string;\n  /**This is a Tags for swagger */\n  Tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmInterface.html":{"url":"classes/TypeOrmInterface.html","title":"class - TypeOrmInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/TypeOrm/typeorm.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                TypeOrm data types Declared here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:14\n                        \n                    \n\n            \n                \n                    database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:6\n                        \n                    \n\n            \n                \n                    Host name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:12\n                        \n                    \n\n            \n                \n                    Password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:8\n                        \n                    \n\n            \n                \n                    prot number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:10\n                        \n                    \n\n            \n                \n                    username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TypeOrmInterface {\n  /**Host name */\n  host: string;\n  /**prot number */\n  port: number;\n  /**username*/\n  username: string;\n  /**Password */\n  password: string;\n  /**database */\n  database: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unauthorized.html":{"url":"classes/Unauthorized.html","title":"class - Unauthorized","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unauthorized\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom Unauthorized Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:16\n                            \n                        \n\n                \n                    \n                            This is a  Unauthorized constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is user entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:12\n                        \n                    \n\n            \n                \n                    id creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Login\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, login => login.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:16\n                        \n                    \n\n            \n                \n                    login creation\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Login } from './login.entity';\nimport { CommonEntity } from './common.entity';\n\n/**\n * This is user entity\n */\n@Entity()\nexport class User extends CommonEntity {\n  /**id creation */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**login creation */\n  @OneToOne(() => Login, (login) => login.user, { cascade: true })\n  login: Login;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                This is user controller all user related roturs are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                LoginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateUser(data: userDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:32\n                \n            \n\n\n            \n                \n                    This is a create user method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                userDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save data in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginUser(data: loginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('LoginUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n                    This is a login method\nintiels are true return success\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                loginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        in credimport { HttpExceptionFilter } from './../../Common/Filters/exception.filter';\nintiels are true return success\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('logoutUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:57\n                \n            \n\n\n            \n                \n                    This method is used to delete the jwt token from the cookie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Post,\n  Res,\n  UseFilters,\n  ValidationPipe\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { loginDto } from './dto/login.dto';\nimport { Response } from 'express';\nimport { HttpExceptionFilter } from 'src/Common/Filters/exception.filter';\nimport { userDto } from './dto/user.dto';\n\n/**\n * This is user controller all user related roturs are avaliable here\n */\n@ApiTags('User')\n@Controller('user')\n@UseFilters(HttpExceptionFilter)\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * This is a create user method\n   * @param data is taken from the user\n   * @returns save data in database\n   */\n  @Post('addUser')\n  async CreateUser(@Body() data: userDto) {\n    return await this.userService.CreateUser(data);\n  }\n\n  /**\n   * This is a login method\n   * @param data is taken from the user\n   * @param response imported from the express library\n   * @returns in credimport { HttpExceptionFilter } from './../../Common/Filters/exception.filter';\nintiels are true return success\n   */\n  @Post('LoginUser')\n  async LoginUser(\n    @Body() data: loginDto,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return await this.userService.loginUser(data, response);\n  }\n\n  /**\n   * This method is used to delete the jwt token from the cookie\n   * @param response\n   * @returns\n   */\n  @Delete('logoutUser')\n  async logoutUser(\n    @Res({ passthrough: true }) response: Response\n  ): Promise {\n    return await this.userService.logoutUser(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\njwtServiceClass\n\njwtServiceClass\n\nUserModule -->\n\njwtServiceClass->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is user module all user related configurations are avaliable here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                        \n                            jwtServiceClass\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { jwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { Login } from './../../Entities/login.entity';\n\n/**\n * This is user module all user related configurations are avaliable here\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Login]),\n    JwtModule.register({\n      secret: 'secret',\n      signOptions: { expiresIn: '3h' }\n    })\n  ],\n\n  controllers: [UserController],\n  providers: [UserService, jwtServiceClass]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a userService class all user related business logics are avaliable here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                getRole\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, loginRepository: Repository, jwtserviceClass: jwtServiceClass)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtserviceClass\n                                                  \n                                                        \n                                                                        jwtServiceClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateUser(data: userDto)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:32\n                \n            \n\n\n            \n                \n                    This is a create user method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                userDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save data in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:74\n                \n            \n\n\n            \n                \n                    This method is used to find user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRole(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:84\n                \n            \n\n\n            \n                \n                    This method is used to get roles\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: loginDto, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:54\n                \n            \n\n\n            \n                \n                    This is a login method\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                loginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        in credimport { GlobalAccess } from './../../Common/Access/global.access';\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:96\n                \n            \n\n\n            \n                \n                    This is logout method used to delete the token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { loginDto } from './dto/login.dto';\nimport { jwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Request, Response } from 'express';\nimport { GlobalAccess } from 'src/Common/Access/global.access';\nimport { Login } from './../../Entities/login.entity';\nimport { userDto } from './dto/user.dto';\n/**This is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n/**\n * This is a userService class all user related business logics are avaliable here\n */\n@Injectable()\nexport class UserService {\n  /**Constructor */\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    @InjectRepository(Login)\n    private readonly loginRepository: Repository,\n    private readonly jwtserviceClass: jwtServiceClass\n  ) {}\n\n  /**\n   * This is a create user method\n   * @param data is taken from the user\n   * @returns save data in database\n   */\n  async CreateUser(data: userDto) {\n    const user = new User();\n    const login = new Login();\n    login.username = data.username;\n    login.password = data.password;\n    login.role = data.role;\n    login.createdBy = data.firstname;\n    user.createdBy = data.firstname;\n    user.login = login;\n    const newData = Object.assign(user, data);\n    return await this.userRepository.save(newData);\n  }\n\n  /**\n   * This is a login method\n   * @param data is taken from the user\n   * @param response imported from the express library\n   * @returns in credimport { GlobalAccess } from './../../Common/Access/global.access';\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n   */\n  async loginUser(data: loginDto, response: Response) {\n    const getUser = await this.loginRepository.findOne({\n      username: data.username\n    });\n    const match = await bcrypt.compare(data.password, getUser.password);\n    if (!getUser || !match) {\n      throw new UnauthorizedException('incorrect credentials');\n    }\n    const jwt = await this.jwtserviceClass.CreateJwtToken(getUser);\n    response.cookie('jwt', jwt, { httpOnly: true });\n    GlobalAccess.role = getUser.role;\n    const { password, ...result } = getUser;\n    return result;\n  }\n\n  /**\n   * This method is used to find user\n   * @param email\n   * @returns\n   */\n  async findUser(username: string) {\n    const getUser = await this.loginRepository.findOne({ username: username });\n    return getUser;\n  }\n\n  /**\n   * This method is used to get roles\n   * @param request\n   * @returns\n   */\n  async getRole(request: Request) {\n    const token = request.cookies['jwt'];\n    const tokenData = await this.jwtserviceClass.verifyJwtToken(token);\n    const getuser = await this.findUser(tokenData.email);\n    return getuser.role;\n  }\n\n  /**\n   * This is logout method used to delete the token\n   * @param response\n   * @returns\n   */\n  async logoutUser(response: Response) {\n    await this.jwtserviceClass.deleteToken(response);\n    return 'logout success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Pipes/validation.pipes.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to validate inputs\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:27\n                \n            \n\n\n            \n                \n                    This is used to validate the property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:15\n                \n            \n\n\n            \n                \n                    This method is used to return the value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n/**\n * This method is used to validate inputs\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  /**This method is used to return the value */\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n  /**This is used to validate the property */\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Common/Access/global.access.ts\n            \n            class\n            GlobalAccess\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Decorators/cache.decorator.ts\n            \n            variable\n            CacheKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/Decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            BadRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            ForbiddenException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            NotFound\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            Unauthorized\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Guards/roles.guards.ts\n            \n            guard\n            RolesGuards\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/MiddleWare/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/Pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/Providers/jwt.service.ts\n            \n            injectable\n            jwtServiceClass\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Common/constant/role.constant.ts\n            \n            variable\n            Admin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/constant/role.constant.ts\n            \n            variable\n            Doctor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/constant/role.constant.ts\n            \n            variable\n            recption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/interceptor/cache-manager.interceptor.ts\n            \n            injectable\n            CacheManagerInterceptor\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.config.ts\n            \n            variable\n            SWAGGER_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.ts\n            \n            function\n            createDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/TypeOrm/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/TypeOrm/typeorm.interface.ts\n            \n            class\n            TypeOrmInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/Entities/Booking.entity.ts\n            \n            entity\n            BookingOperationTheater\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/common.entity.ts\n            \n            class\n            CommonEntity\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/Entities/login.entity.ts\n            \n            entity\n            Login\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/login.entity.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/maintanance.entity.ts\n            \n            class\n            Maintenance\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/Entities/operationTheaterInfo.entity.ts\n            \n            entity\n            OperationTheaterInfo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/staff-info.entity.ts\n            \n            entity\n            staffInfo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/staffCategory.entity.ts\n            \n            entity\n            StaffCategory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Modules/booking/booking.controller.ts\n            \n            controller\n            BookingController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/booking/booking.service.ts\n            \n            injectable\n            BookingService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/Modules/configure/configure.controller.ts\n            \n            controller\n            ConfigureController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/configure/configure.service.ts\n            \n            injectable\n            ConfigureService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/Modules/staffinfo/dto/staff.dto.ts\n            \n            class\n            staffInfoDto\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                src/Modules/staffinfo/staffinfo.controller.ts\n            \n            controller\n            StaffinfoController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Modules/staffinfo/staffinfo.service.ts\n            \n            injectable\n            StaffinfoService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/login.dto.ts\n            \n            class\n            loginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/user.dto.ts\n            \n            class\n            userDto\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                src/Modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^3.6.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            mysql2 : ^2.3.3\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createDocument   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is a main file program execution is started from here\n\n\n                \n            \n        \n    \n    src/Config/Swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    This function is used to create a swagger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the nestjs commom library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        create swagger document\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/jwtServiceClass.html":{"url":"injectables/jwtServiceClass.html","title":"injectable - jwtServiceClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  jwtServiceClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Providers/jwt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a jwt service class all jwt related methjod is avaliabale here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateJwtToken\n                            \n                            \n                                    Async\n                                deleteToken\n                            \n                            \n                                    Async\n                                verifyJwtToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtservice: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Providers/jwt.service.ts:10\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtservice\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateJwtToken(login: Login)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:19\n                \n            \n\n\n            \n                \n                    This is create token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:31\n                \n            \n\n\n            \n                \n                    This is delete token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyJwtToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:25\n                \n            \n\n\n            \n                \n                    This is verify token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\nimport { Login } from './../../Entities/login.entity';\n\n/**\n * This is a jwt service class all jwt related methjod is avaliabale here\n */\n@Injectable()\nexport class jwtServiceClass {\n  /**constructor */\n  constructor(private readonly jwtservice: JwtService) {}\n\n  /**\n   * This is create token method\n   * @param user\n   * @returns\n   */\n  async CreateJwtToken(login: Login) {\n    const jwt = await this.jwtservice.signAsync({ username: login.username });\n    return jwt;\n  }\n\n  /**This is verify token method */\n  async verifyJwtToken(token: string) {\n    const verifyToken = await this.jwtservice.verifyAsync(token);\n    return verifyToken;\n  }\n\n  /**This is delete token method */\n  async deleteToken(response: Response) {\n    response.clearCookie('jwt');\n    return 'logout success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/loginDto.html":{"url":"classes/loginDto.html","title":"class - loginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  loginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:12\n                        \n                    \n\n            \n                \n                    username creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:8\n                        \n                    \n\n            \n                \n                    username creation\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n/**\n * This is login dto\n */\nexport class loginDto {\n  /**username creation */\n  @ApiProperty()\n  username: string;\n\n  /**username creation */\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigureModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StaffinfoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_BookingModule\n\n\n\ncluster_BookingModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nBookingModule\n\nBookingModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nBookingModule->AppModule\n\n\n\n\n\nConfigureModule\n\nConfigureModule\n\nAppModule -->\n\nConfigureModule->AppModule\n\n\n\n\n\nStaffinfoModule\n\nStaffinfoModule\n\nAppModule -->\n\nStaffinfoModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nBookingService\n\nBookingService\n\nBookingModule -->\n\nBookingService->BookingModule\n\n\n\n\n\nConfigureService\n\nConfigureService\n\nBookingModule -->\n\nConfigureService->BookingModule\n\n\n\nConfigureModule -->\n\nConfigureService->ConfigureModule\n\n\n\n\n\nStaffinfoService\n\nStaffinfoService\n\nBookingModule -->\n\nStaffinfoService->BookingModule\n\n\n\nStaffinfoModule -->\n\nStaffinfoService->StaffinfoModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\njwtServiceClass\n\njwtServiceClass\n\nUserModule -->\n\njwtServiceClass->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/staffInfo.html":{"url":"entities/staffInfo.html","title":"entity - staffInfo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  staffInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/staff-info.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is staffInfo entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bookingoperationTheater\n                            \n                            \n                                category\n                            \n                            \n                                id\n                            \n                            \n                                staffcategory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bookingoperationTheater\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BookingOperationTheater[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, bookingoperationTheater => bookingoperationTheater.staffinfo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staff-info.entity.ts:35\n                        \n                    \n\n            \n                \n                    one to many relation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staff-info.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staff-info.entity.ts:20\n                        \n                    \n\n            \n                \n                    id primari generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        staffcategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StaffCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, staffcategory => staffcategory.staffinfo)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/staff-info.entity.ts:28\n                        \n                    \n\n            \n                \n                    one to one relation\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { CommonEntity } from './common.entity';\nimport { StaffCategory } from './staffCategory.entity';\nimport { BookingOperationTheater } from './Booking.entity';\n\n/**\n * This is staffInfo entity\n */\n@Entity()\nexport class staffInfo extends CommonEntity {\n  /**id primari generated column */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  category: string;\n\n  /**one to one relation */\n  @ManyToOne(() => StaffCategory, (staffcategory) => staffcategory.staffinfo)\n  @JoinColumn()\n  staffcategory: StaffCategory;\n\n  /**one to many relation */\n  @OneToMany(\n    () => BookingOperationTheater,\n    (bookingoperationTheater) => bookingoperationTheater.staffinfo\n  )\n  bookingoperationTheater: BookingOperationTheater[];\n\n  /**This method is used to push the data to  bookingoperationTheater */\n  addbookingInfo(bookingoperationTheater: BookingOperationTheater) {\n    if (this.bookingoperationTheater == null) {\n      this.bookingoperationTheater = new Array();\n    }\n    return this.bookingoperationTheater.push(bookingoperationTheater);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/staffInfoDto.html":{"url":"classes/staffInfoDto.html","title":"class - staffInfoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  staffInfoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/staffinfo/dto/staff.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addAddressLine1\n                            \n                            \n                                addAddressLine2\n                            \n                            \n                                Categoryname\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                dateofbirth\n                            \n                            \n                                emailid\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                phonenumber\n                            \n                            \n                                pincode\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:32\n                        \n                    \n\n            \n                \n                    addAddressLine1 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:37\n                        \n                    \n\n            \n                \n                    addAddressLine2 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Categoryname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:42\n                        \n                    \n\n            \n                \n                    city generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:52\n                        \n                    \n\n            \n                \n                    country generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateofbirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:17\n                        \n                    \n\n            \n                \n                    dateofbirth generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:27\n                        \n                    \n\n            \n                \n                    emailid generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:12\n                        \n                    \n\n            \n                \n                    lastname generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phonenumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:22\n                        \n                    \n\n            \n                \n                    phonenumber generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:57\n                        \n                    \n\n            \n                \n                    pincode generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/staffinfo/dto/staff.dto.ts:47\n                        \n                    \n\n            \n                \n                    state generated column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsInt, IsString } from 'class-validator';\n\nexport class staffInfoDto {\n  @IsString()\n  @ApiProperty()\n  firstname: string;\n\n  /**lastname generated column */\n  @IsString()\n  @ApiProperty()\n  lastname: string;\n\n  /**dateofbirth generated column */\n  @IsString()\n  @ApiProperty()\n  dateofbirth: string;\n\n  /**phonenumber generated column */\n  @IsString()\n  @ApiProperty()\n  phonenumber: string;\n\n  /**emailid generated column */\n  @IsEmail()\n  @ApiProperty()\n  emailid: string;\n\n  /**addAddressLine1 generated column */\n  @IsString()\n  @ApiProperty()\n  addAddressLine1: string;\n\n  /**addAddressLine2 generated column */\n  @IsString()\n  @ApiProperty()\n  addAddressLine2: string;\n\n  /**city generated column */\n  @IsString()\n  @ApiProperty()\n  city: string;\n\n  /**state generated column */\n  @IsString()\n  @ApiProperty()\n  state: string;\n\n  /**country generated column */\n  @IsString()\n  @ApiProperty()\n  country: string;\n\n  /**pincode generated column */\n  @IsInt()\n  @ApiProperty()\n  pincode: number;\n\n  @IsString()\n  @ApiProperty()\n  Categoryname: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userDto.html":{"url":"classes/userDto.html","title":"class - userDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is user Dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addAddressLine1\n                            \n                            \n                                addAddressLine2\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                dateofbirth\n                            \n                            \n                                emailid\n                            \n                            \n                                firstname\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                            \n                                phonenumber\n                            \n                            \n                                pincode\n                            \n                            \n                                role\n                            \n                            \n                                state\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:34\n                        \n                    \n\n            \n                \n                    addAddressLine1 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addAddressLine2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:39\n                        \n                    \n\n            \n                \n                    addAddressLine2 generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:44\n                        \n                    \n\n            \n                \n                    city generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:54\n                        \n                    \n\n            \n                \n                    country generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateofbirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:19\n                        \n                    \n\n            \n                \n                    dateofbirth generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:29\n                        \n                    \n\n            \n                \n                    emailid generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:14\n                        \n                    \n\n            \n                \n                    lastname generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:67\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phonenumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:24\n                        \n                    \n\n            \n                \n                    phonenumber generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pincode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:59\n                        \n                    \n\n            \n                \n                    pincode generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:71\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:49\n                        \n                    \n\n            \n                \n                    state generated column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:63\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\n/**\n * This is user Dto\n */\nexport class userDto {\n  @IsString()\n  @ApiProperty()\n  firstname: string;\n\n  /**lastname generated column */\n  @IsString()\n  @ApiProperty()\n  lastname: string;\n\n  /**dateofbirth generated column */\n  @IsString()\n  @ApiProperty()\n  dateofbirth: string;\n\n  /**phonenumber generated column */\n  @IsString()\n  @ApiProperty()\n  phonenumber: string;\n\n  /**emailid generated column */\n  @IsString()\n  @ApiProperty()\n  emailid: string;\n\n  /**addAddressLine1 generated column */\n  @IsString()\n  @ApiProperty()\n  addAddressLine1: string;\n\n  /**addAddressLine2 generated column */\n  @IsString()\n  @ApiProperty()\n  addAddressLine2: string;\n\n  /**city generated column */\n  @IsString()\n  @ApiProperty()\n  city: string;\n\n  /**state generated column */\n  @IsString()\n  @ApiProperty()\n  state: string;\n\n  /**country generated column */\n  @IsString()\n  @ApiProperty()\n  country: string;\n\n  /**pincode generated column */\n  @IsInt()\n  @ApiProperty()\n  pincode: number;\n\n  /**Name creation */\n  @ApiProperty()\n  username: string;\n\n  /**Name creation */\n  @ApiProperty()\n  password: string;\n\n  /**Name creation */\n  @ApiProperty()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Admin   (src/.../role.constant.ts)\n                        \n                        \n                            bcrypt   (src/.../login.entity.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            CacheKey   (src/.../cache.decorator.ts)\n                        \n                        \n                            Doctor   (src/.../role.constant.ts)\n                        \n                        \n                            recption   (src/.../role.constant.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SWAGGER_CONFIG   (src/.../swagger.config.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Common/constant/role.constant.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Admin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Admin'\n                    \n                \n\n            \n                \n                    constant\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Doctor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Doctor'\n                    \n                \n\n            \n                \n                    constant\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Recptionist'\n                    \n                \n\n            \n                \n                    constant\n\n                \n            \n\n        \n    \n\n    src/Entities/login.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This bcrypt is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Modules/user/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Common/Decorators/cache.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cacheKeyValue) =>\n  SetMetadata('cache-key', cacheKeyValue)\n                    \n                \n\n            \n                \n                    This is a custom decorator fro CacheKey\n\n                \n            \n\n        \n    \n\n    src/Common/Decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role) => SetMetadata('roles', role)\n                    \n                \n\n            \n                \n                    This is a custom decorator fro roles\n\n                \n            \n\n        \n    \n\n    src/Config/Swagger/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SwaggerConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  Title: 'MockThon',\n  Description: 'all mockthon apis are avaliabale here',\n  Version: '1.0',\n  Tags: ['Template']\n}\n                    \n                \n\n            \n                \n                    This variable is used to configure the swagger related info\n\n                \n            \n\n        \n    \n\n    src/Config/TypeOrm/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TypeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeOrmInterface\n\n                    \n                \n                \n                    \n                        Default value : {\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: 'root',\n  database: 'hospital'\n}\n                    \n                \n\n            \n                \n                    all typeOrm configurations are avaliable here\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
