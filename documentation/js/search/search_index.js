var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.806,1,2.012]],["body/controllers/AppController.html",[0,2.942,1,3.278,2,2.372,3,0.306,4,0.306,5,0.254,6,3.434,7,0.254,8,4.26,9,0.171,10,0.664,11,0.033,12,0.813,13,2.895,14,3.434,15,0.36,16,2.372,17,2.372,18,3.434,19,1.162,20,1.636,21,4.122,22,0.026,23,0.026]],["title/modules/AppModule.html",[24,2.012,25,2.012]],["body/modules/AppModule.html",[1,3.1,2,2.44,3,0.23,4,0.23,5,0.191,9,0.095,10,0.749,11,0.033,12,0.61,13,2.932,14,2.577,15,0.27,22,0.022,23,0.022,24,2.718,25,3.762,26,1.78,27,2.44,28,2.577,29,2.577,30,2.577,31,3.239,32,3.066,33,2.237,34,2.237,35,3.094,36,3.532,37,3.532,38,1.228,39,2.577,40,4.239,41,5.203,42,0.45,43,3.094,44,1.127,45,0.872,46,0.617,47,1.127,48,3.094,49,1.127,50,2.237,51,4.239,52,2.577,53,1.983,54,3.094,55,2.237,56,3.094,57,1.983,58,3.094,59,3.094,60,3.094,61,3.094,62,1.983,63,3.094,64,2.237,65,3.094,66,1.34,67,3.094,68,1.467,69,3.094,70,1.78,71,3.094,72,3.094,73,2.01,74,3.094,75,1.611,76,3.094]],["title/injectables/AppService.html",[13,1.634,77,0.812]],["body/injectables/AppService.html",[3,0.319,4,0.319,5,0.265,7,0.265,8,4.368,9,0.174,10,0.558,11,0.033,12,0.847,13,2.731,15,0.375,18,3.577,19,1.211,20,1.704,22,0.027,23,0.027,77,1.356,78,2.036,79,3.577,80,4.294,81,4.294]],["title/classes/BadRequest.html",[9,0.096,82,1.634]],["body/classes/BadRequest.html",[3,0.246,4,0.246,5,0.204,7,0.204,9,0.164,10,0.43,11,0.034,12,0.653,15,0.467,22,0.023,23,0.023,42,0.482,82,2.992,83,1.108,84,1.906,85,3.211,86,3.577,87,3.211,88,3.305,89,2.666,90,3.313,91,2.124,92,2.846,93,1.725,94,2.124,95,2.124,96,2.609,97,2.124,98,2.124,99,2.609,100,2.124,101,2.124,102,2.124,103,2.124,104,1.571,105,2.124]],["title/injectables/CacheManagerInterceptor.html",[77,0.812,106,2.269]],["body/injectables/CacheManagerInterceptor.html",[3,0.195,4,0.195,5,0.162,7,0.162,9,0.136,10,0.63,11,0.033,12,0.52,15,0.23,16,1.516,20,1.503,22,0.019,23,0.019,38,1.503,42,0.645,44,1.379,45,1.068,46,0.551,47,1.379,49,0.959,75,1.372,77,0.98,78,1.249,89,1.921,106,2.739,107,4.038,108,2.195,109,3.787,110,4.454,111,4.848,112,0.426,113,1.379,114,2.675,115,4.434,116,2.195,117,4.454,118,3.787,119,2.635,120,4.038,121,2.842,122,4.848,123,2.635,124,1.641,125,3.155,126,2.179,127,1.516,128,2.551,129,3.787,130,3.787,131,3.787,132,3.787,133,3.155,134,3.787,135,2.739,136,1.266,137,3.787,138,4.038,139,3.787,140,2.195,141,2.635,142,1.905,143,2.635,144,1.905,145,1.641,146,3.155,147,2.635,148,2.195,149,4.848,150,2.195,151,1.372,152,2.635,153,2.635,154,1.689,155,2.635,156,1.973,157,2.635,158,2.635,159,2.635]],["title/classes/ForbiddenException.html",[9,0.096,93,1.634]],["body/classes/ForbiddenException.html",[3,0.246,4,0.246,5,0.204,7,0.204,9,0.164,10,0.43,11,0.034,12,0.653,15,0.467,22,0.023,23,0.023,42,0.482,82,2.609,83,1.108,84,1.906,85,3.211,86,3.577,87,3.211,88,3.305,89,2.666,91,2.124,92,3.43,93,2.313,94,2.124,95,2.124,96,2.609,97,2.124,98,2.124,99,2.609,100,2.124,101,2.124,102,2.124,103,2.124,104,1.571,105,2.124,160,3.313]],["title/classes/GlobalAccess.html",[9,0.096,161,1.806]],["body/classes/GlobalAccess.html",[3,0.306,4,0.306,5,0.254,7,0.254,9,0.157,11,0.033,15,0.36,19,1.162,22,0.026,23,0.026,42,0.6,46,0.6,83,1.378,112,0.667,113,1.862,127,2.372,128,2.372,136,1.378,161,2.942,162,3.434,163,4.122,164,3.345,165,6.09,166,3.563,167,4.122]],["title/classes/HttpExceptionFilter.html",[9,0.096,168,2.012]],["body/classes/HttpExceptionFilter.html",[3,0.231,4,0.231,5,0.192,7,0.192,9,0.168,10,0.553,11,0.033,12,0.614,15,0.272,22,0.022,23,0.022,38,1.689,42,0.453,44,1.133,45,0.878,46,0.453,47,1.133,49,1.133,50,2.251,62,3.11,75,2.217,83,1.041,88,3.001,104,2.018,112,0.504,124,1.348,136,1.744,145,2.259,156,2.217,168,2.729,169,2.593,170,4.345,171,5.216,172,5.216,173,4.345,174,4.852,175,4.852,176,4.257,177,5.216,178,3.112,179,3.112,180,1.621,181,3.112,182,3.112,183,3.112,184,3.112,185,3.112,186,4.257,187,3.112,188,2.593,189,3.112,190,3.112,191,3.112,192,3.112,193,3.112,194,2.593,195,3.112,196,1.621,197,3.112,198,3.112,199,3.112,200,3.112,201,3.112]],["title/injectables/LoggerMiddleware.html",[57,2.012,77,0.812]],["body/injectables/LoggerMiddleware.html",[3,0.404,4,0.207,5,0.172,7,0.172,9,0.086,10,0.512,11,0.033,12,0.549,15,0.243,20,1.972,22,0.02,23,0.02,38,1.563,42,0.573,44,1.014,45,0.785,46,0.405,47,1.014,49,1.014,50,2.849,57,2.525,75,1.45,77,1.019,78,1.32,104,2.582,112,0.451,113,1.434,121,3.186,124,2.425,127,1.602,128,1.602,136,1.662,145,2.153,156,2.979,166,2.525,180,1.45,188,3.282,194,3.809,196,2.052,202,2.32,203,5.446,204,1.706,205,3.939,206,3.793,207,3.939,208,3.939,209,4.97,210,2.784,211,3.939,212,3.939,213,2.784,214,3.939,215,2.784,216,4.572,217,2.784,218,2.784,219,2.784,220,2.784,221,4.572,222,2.784,223,2.784,224,3.939,225,3.939]],["title/entities/Login.html",[226,1.634,227,1.245]],["body/entities/Login.html",[3,0.21,4,0.21,5,0.174,7,0.174,9,0.087,10,0.651,11,0.033,15,0.247,19,1.544,22,0.021,23,0.021,42,0.768,46,0.768,66,1.998,68,2.374,73,1.342,87,1.629,112,0.458,113,1.451,114,1.474,121,1.814,135,2.047,136,0.946,145,1.226,151,1.474,164,2.654,226,2.608,227,1.987,228,2.047,229,2.047,230,3.843,231,2.126,232,2.293,233,2.749,234,3.843,235,2.83,236,3.985,237,2.83,238,2.83,239,2.358,240,2.83,241,2.83,242,2.358,243,2.83,244,2.83,245,3.209,246,1.474,247,3.985,248,3.62,249,3.985,250,3.32,251,1.342,252,2.554,253,2.83,254,2.83,255,2.554,256,2.047,257,2.358,258,2.358,259,2.358,260,2.047,261,2.358,262,2.358,263,2.358,264,2.047,265,2.358,266,2.83,267,2.83,268,2.83,269,2.358]],["title/classes/Maintenance.html",[9,0.096,252,2.012]],["body/classes/Maintenance.html",[3,0.18,4,0.18,5,0.149,7,0.149,9,0.074,10,0.315,11,0.034,15,0.212,19,1.654,22,0.018,23,0.018,42,0.781,46,0.781,73,1.69,83,0.811,112,0.392,113,1.298,127,2.989,196,1.856,204,1.544,226,1.856,233,2.796,248,4.519,251,1.149,252,2.988,270,2.019,271,3.564,272,3.564,273,2.051,274,1.298,275,4.228,276,4.228,277,4.228,278,4.967,279,4.228,280,4.967,281,4.228,282,2.424,283,5.974,284,3.564,285,5.194,286,2.969,287,2.424,288,3.564,289,2.424,290,3.564,291,2.578,292,2.424,293,2.424,294,3.564,295,2.424,296,2.424,297,3.564,298,2.424,299,2.424]],["title/classes/NotFound.html",[9,0.096,99,1.634]],["body/classes/NotFound.html",[3,0.246,4,0.246,5,0.204,7,0.204,9,0.164,10,0.43,11,0.034,12,0.653,15,0.467,22,0.023,23,0.023,42,0.482,82,2.609,83,1.108,84,1.906,85,3.211,86,3.577,87,3.211,88,3.305,89,2.666,91,2.124,92,2.846,93,1.725,94,2.124,95,2.124,96,2.609,97,2.124,98,2.124,99,2.992,100,2.124,101,2.124,102,2.124,103,2.124,104,1.571,105,2.124,300,3.313]],["title/guards/RolesGuards.html",[301,2.269,302,2.269]],["body/guards/RolesGuards.html",[3,0.204,4,0.204,5,0.322,7,0.17,9,0.085,10,0.643,11,0.034,12,0.543,15,0.24,16,1.585,17,1.585,20,2.153,22,0.02,23,0.02,38,1.551,42,0.569,44,1.424,45,1.103,46,0.569,47,1.424,49,1.003,73,2.155,75,1.435,77,1.011,89,1.969,112,0.446,116,2.295,117,4.521,120,4.121,124,2.143,125,3.257,126,2.25,136,1.747,140,3.786,142,1.992,144,1.992,145,1.193,148,2.295,150,2.295,154,1.766,161,1.585,164,2.25,231,1.424,291,2.827,302,2.827,303,4.545,304,2.295,305,3.478,306,4.947,307,4.121,308,5.224,309,2.754,310,2.754,311,2.754,312,2.754,313,2.754,314,1.992,315,3.909,316,3.909,317,2.754,318,3.257,319,2.754,320,2.754,321,2.754]],["title/interfaces/SwaggerConfig.html",[322,2.012,323,2.012]],["body/interfaces/SwaggerConfig.html",[3,0.272,4,0.272,5,0.226,7,0.371,11,0.032,15,0.32,19,1.775,22,0.024,23,0.024,46,0.81,112,0.593,113,1.729,204,1.588,274,1.335,322,2.35,323,3.043,324,3.667,325,3.055,326,3.949,327,2.651,328,3.055,329,4.923,330,4.923,331,4.923]],["title/classes/TypeOrmInterface.html",[9,0.096,332,2.012]],["body/classes/TypeOrmInterface.html",[3,0.265,4,0.265,5,0.22,7,0.22,9,0.11,11,0.032,15,0.312,19,1.71,22,0.024,23,0.024,42,0.833,45,1.318,46,0.833,62,3.669,64,3.762,66,2.479,68,2.713,70,3.293,83,1.196,112,0.579,113,1.701,232,3.174,251,1.696,274,1.303,327,2.587,328,2.98,332,2.995,333,2.98,334,2.587,335,3.577,336,3.577,337,3.577,338,3.577,339,4.672,340,3.577]],["title/classes/Unauthorized.html",[9,0.096,96,1.634]],["body/classes/Unauthorized.html",[3,0.246,4,0.246,5,0.204,7,0.204,9,0.164,10,0.43,11,0.034,12,0.653,15,0.467,22,0.023,23,0.023,42,0.482,82,2.609,83,1.108,84,1.906,85,3.211,86,3.577,87,3.211,88,3.305,89,2.666,91,2.124,92,2.846,93,1.725,94,2.124,95,2.124,96,2.992,97,2.124,98,2.124,99,2.609,100,2.124,101,2.124,102,2.124,103,2.124,104,1.571,105,2.124,341,3.313]],["title/entities/User.html",[226,1.634,231,1.143]],["body/entities/User.html",[3,0.202,4,0.202,5,0.168,7,0.168,9,0.119,10,0.639,11,0.033,15,0.237,19,1.524,22,0.02,23,0.02,42,0.786,45,1.387,46,0.786,73,2.139,112,0.44,113,1.41,226,2.561,227,2.356,228,1.966,230,4.33,231,1.79,232,2.829,233,2.814,234,3.758,239,2.264,242,2.264,245,3.332,246,1.416,248,3.758,250,3.226,251,1.289,265,2.264,342,2.264,343,4.096,344,4.096,345,4.096,346,2.718,347,2.718,348,3.873,349,2.718,350,2.718,351,4.11,352,3.873,353,3.873,354,2.718,355,2.718,356,2.718,357,2.718,358,3.873,359,4.917,360,1.966,361,2.718]],["title/controllers/UserController.html",[0,1.806,362,2.012]],["body/controllers/UserController.html",[0,2.242,2,1.217,3,0.157,4,0.157,5,0.13,7,0.24,9,0.065,10,0.667,11,0.033,12,0.417,15,0.185,16,1.217,17,1.217,20,1.959,22,0.017,23,0.017,38,1.277,42,0.567,44,1.419,45,1.099,46,0.567,47,1.419,49,1.798,70,1.852,73,2.065,112,0.342,114,2.822,124,2.138,126,1.852,136,1.076,151,2.03,154,2.063,156,3.034,168,2.498,180,2.03,204,1.394,227,1.277,231,2.046,233,2.03,246,1.102,273,1.852,274,1.172,334,3.825,362,2.063,363,1.762,364,2.115,365,3.219,366,2.682,367,3.246,368,2.682,369,1.762,370,2.506,371,3.219,372,2.115,373,2.063,374,3.628,375,2.063,376,1.762,377,2.506,378,3.219,379,2.115,380,3.246,381,2.818,382,2.328,383,2.328,384,2.682,385,3.219,386,2.682,387,3.219,388,2.115,389,2.818,390,2.063,391,2.328,392,2.682,393,3.219,394,2.115,395,3.219,396,2.115,397,1.356,398,2.03,399,1.762,400,2.115,401,1.762,402,2.115,403,1.762,404,2.115,405,2.115,406,2.115,407,3.15,408,2.115,409,2.115,410,2.115,411,2.115,412,2.115]],["title/modules/UserModule.html",[24,2.012,31,1.806]],["body/modules/UserModule.html",[2,2.501,3,0.238,4,0.238,5,0.198,7,0.198,9,0.099,10,0.769,11,0.033,12,0.633,15,0.28,22,0.022,23,0.022,24,3.386,26,1.847,27,2.501,31,3.407,32,3.143,33,2.321,34,2.321,36,3.621,37,2.674,52,2.674,53,2.057,204,1.883,227,1.725,231,2.01,273,2.501,274,1.583,362,3.16,398,2.964,399,2.674,413,2.674,414,2.674,415,2.964,416,3.21,417,3.621,418,3.21,419,2.674,420,2.674,421,3.21,422,2.321,423,2.321,424,3.21,425,3.21,426,4.347,427,3.21,428,3.21,429,3.21]],["title/injectables/UserService.html",[77,0.812,398,1.634]],["body/injectables/UserService.html",[3,0.105,4,0.105,5,0.087,7,0.184,9,0.092,10,0.636,11,0.034,12,0.279,15,0.123,17,1.718,19,0.842,20,1.524,22,0.012,23,0.012,38,0.927,42,0.602,44,1.506,45,1.167,46,0.602,47,1.506,49,1.781,53,0.906,66,1.502,68,1.107,70,1.344,73,1.644,77,0.604,78,0.67,89,1.502,104,1.961,112,0.229,114,2.803,121,0.906,124,2.119,126,1.344,136,1.464,145,2.22,151,2.384,154,1.497,156,2.719,161,1.718,170,1.946,180,1.555,196,1.555,204,1.012,206,2.159,227,1.884,231,1.901,251,0.67,255,0.906,256,1.022,257,1.177,258,1.177,259,1.177,260,1.022,261,1.177,262,1.177,263,1.177,264,1.022,269,1.177,273,1.344,274,0.85,305,1.497,318,1.177,334,3.166,366,1.946,367,1.946,368,1.946,369,1.946,370,2.519,373,1.497,374,2.889,375,2.223,376,1.946,377,1.996,380,2.487,381,1.022,382,1.689,383,1.689,384,1.946,386,1.946,389,1.689,390,1.497,391,2.159,398,1.806,401,1.177,403,2.889,407,2.991,415,2.28,419,1.177,420,1.177,423,2.508,430,1.022,431,2.336,432,2.336,433,2.336,434,2.336,435,1.413,436,3.647,437,2.985,438,1.413,439,2.336,440,1.413,441,2.336,442,1.413,443,2.336,444,1.413,445,1.413,446,2.985,447,2.985,448,2.985,449,2.336,450,1.413,451,2.487,452,1.413,453,1.413,454,1.413,455,1.413,456,1.413,457,1.177,458,2.336,459,1.413,460,1.413,461,1.413,462,1.413,463,1.413,464,1.413,465,1.413,466,1.413,467,1.413,468,4.137,469,2.336,470,2.336,471,1.413,472,1.413,473,1.177,474,1.413,475,1.413,476,1.413,477,1.413,478,1.413,479,2.336,480,2.336,481,1.413,482,1.413,483,1.413,484,1.413,485,1.413,486,1.413]],["title/injectables/ValidationPipe.html",[77,0.812,397,2.012]],["body/injectables/ValidationPipe.html",[3,0.215,4,0.215,5,0.178,7,0.178,9,0.143,10,0.607,11,0.033,12,0.571,15,0.253,19,0.816,20,2.112,22,0.021,23,0.021,38,1.606,42,0.589,44,1.474,45,1.142,46,0.589,47,1.474,49,1.474,75,1.507,77,1.047,78,1.372,112,0.468,114,2.431,124,2.19,128,3.173,136,1.844,145,2.022,151,1.507,196,1.507,206,3.376,232,1.665,286,2.411,291,3.376,327,2.093,360,2.093,375,1.855,397,2.595,473,2.411,487,2.411,488,5.321,489,4.048,490,4.048,491,4.048,492,4.048,493,2.894,494,4.048,495,4.668,496,4.048,497,5.056,498,2.894,499,4.048,500,2.894,501,2.894,502,2.411,503,2.894,504,4.048,505,2.894,506,2.894,507,2.894,508,2.894,509,2.894,510,2.894,511,2.894,512,2.894,513,2.894]],["title/coverage.html",[514,3.096]],["body/coverage.html",[0,2.163,1,1.672,5,0.161,6,2.173,9,0.179,11,0.033,13,1.358,22,0.019,23,0.019,46,0.379,55,1.886,57,1.672,77,1.378,79,2.173,82,1.358,84,2.776,93,1.358,96,1.358,99,1.358,106,1.886,107,2.173,108,2.173,133,5.328,161,1.501,162,2.173,166,3.415,168,1.672,169,2.173,196,1.358,202,2.173,226,1.958,227,1.035,229,2.719,231,0.95,252,1.672,255,2.41,270,2.173,301,1.886,302,1.886,304,2.173,305,1.672,322,1.672,323,1.672,325,2.173,332,1.672,333,2.173,342,2.173,362,1.672,363,2.173,370,1.501,377,1.501,397,1.672,398,1.358,415,1.358,430,2.719,487,2.173,514,1.886,515,2.608,516,2.608,517,2.608,518,5.328,519,2.173,520,2.173,521,5.949,522,2.173,523,4.825,524,2.173,525,3.76,526,3.76,527,2.173,528,2.173,529,2.173,530,3.132,531,2.173,532,2.173,533,2.608,534,3.76,535,2.173,536,2.173,537,2.608,538,2.173,539,2.173,540,2.608,541,2.608]],["title/dependencies.html",[27,2.172,542,2.622]],["body/dependencies.html",[9,0.15,11,0.033,12,0.755,22,0.025,23,0.025,27,2.204,53,2.455,110,3.191,138,3.191,142,2.77,144,2.77,180,2.543,246,1.995,251,1.816,326,2.455,360,2.77,390,2.455,392,3.191,422,2.77,502,3.191,543,5.66,544,3.83,545,3.83,546,3.83,547,3.83,548,3.83,549,3.83,550,3.83,551,3.83,552,3.83,553,3.83,554,3.83,555,3.83,556,3.83,557,3.83,558,3.83,559,3.83,560,3.83,561,3.83,562,3.83,563,3.83,564,3.83,565,3.83,566,3.83]],["title/miscellaneous/functions.html",[567,1.68,568,3.144]],["body/miscellaneous/functions.html",[5,0.257,7,0.257,11,0.03,22,0.027,23,0.027,44,1.519,45,1.177,46,0.607,47,1.519,49,1.519,112,0.675,136,1.395,274,1.519,326,3.302,373,3.302,382,3.017,383,3.017,529,3.475,530,3.475,531,4.292,538,3.475,539,4.656,567,2.674,568,3.475,569,4.172,570,4.172,571,4.172,572,4.172,573,4.172,574,3.475,575,4.172,576,5.151,577,3.475,578,4.172,579,4.172,580,4.172,581,4.172]],["title/index.html",[112,0.424,574,2.184,582,2.622]],["body/index.html",[4,0.257,7,0.214,11,0.033,22,0.024,23,0.024,173,2.89,260,2.509,274,1.263,436,2.89,514,2.509,577,2.89,583,3.469,584,3.469,585,4.579,586,3.469,587,3.469,588,3.469,589,3.469,590,3.469,591,3.469,592,5.125,593,3.469,594,3.469,595,5.935,596,3.469,597,3.469,598,5.82,599,3.469,600,3.469,601,4.579,602,3.469,603,3.469,604,3.469,605,3.469,606,4.579,607,4.579,608,3.469,609,3.469,610,3.469,611,4.579,612,4.579,613,3.469,614,3.469,615,3.469,616,3.469,617,2.89,618,3.469,619,3.469,620,3.469,621,3.469,622,3.469,623,3.469,624,3.469,625,3.469,626,3.469,627,3.469,628,3.469,629,3.469,630,3.469,631,3.469,632,3.469,633,3.469,634,3.469]],["title/injectables/jwtServiceClass.html",[77,0.812,415,1.634]],["body/injectables/jwtServiceClass.html",[3,0.192,4,0.192,5,0.159,7,0.159,9,0.135,10,0.624,11,0.033,12,0.509,15,0.225,16,1.486,17,1.486,19,1.236,20,1.74,22,0.019,23,0.019,38,1.481,42,0.699,44,1.749,45,1.354,46,0.699,47,1.749,49,1.749,66,1.118,77,0.965,78,1.224,89,1.899,112,0.418,114,2.975,124,2.3,126,2.148,145,1.617,151,1.944,156,2.653,180,1.345,204,1.617,227,2.022,231,0.94,274,1.359,314,2.699,373,2.392,375,2.392,381,1.867,389,2.699,390,3.404,391,3.959,407,1.867,415,1.944,422,1.867,423,1.867,451,2.151,457,2.151,524,2.151,635,3.732,636,3.732,637,3.732,638,3.732,639,3.732,640,2.582,641,5.31,642,2.582,643,3.732,644,2.582,645,3.732,646,2.582,647,3.732,648,2.582,649,3.732,650,2.582,651,3.732,652,2.582,653,2.582]],["title/classes/loginDto.html",[9,0.096,377,1.806]],["body/classes/loginDto.html",[3,0.285,4,0.285,5,0.237,7,0.237,9,0.118,10,0.5,11,0.033,15,0.336,19,1.599,22,0.025,23,0.025,42,0.712,46,0.712,66,2.634,68,2.553,83,1.286,112,0.622,113,1.782,227,1.942,233,2.549,245,3.752,246,2.002,351,4.099,377,2.816,535,3.203,654,4.077,655,3.845,656,3.845]],["title/modules.html",[26,2.463]],["body/modules.html",[11,0.029,22,0.029,23,0.029,25,3.058,26,2.745,31,2.745,617,4.652,657,5.585,658,5.585,659,5.585]],["title/overview.html",[660,3.566]],["body/overview.html",[2,2.307,11,0.031,13,2.859,22,0.026,23,0.026,25,3.877,26,2.307,27,2.892,28,3.34,29,3.34,30,3.34,31,3.531,32,3.634,33,2.899,34,2.899,78,1.901,83,1.341,135,2.899,228,2.899,301,2.899,322,2.57,398,2.859,413,3.34,414,3.34,415,2.859,660,3.34,661,5.49,662,4.009,663,5.026]],["title/classes/userDto.html",[9,0.096,370,1.806]],["body/classes/userDto.html",[3,0.214,4,0.214,5,0.177,7,0.177,9,0.088,10,0.374,11,0.033,15,0.251,19,1.708,22,0.021,23,0.021,42,0.822,45,1.76,46,0.822,66,2.016,68,2.207,83,0.962,112,0.466,113,1.468,164,2.678,231,1.468,232,2.32,233,2.943,245,3.962,246,1.499,343,3.877,344,3.877,345,3.877,351,4.443,370,2.32,536,2.397,654,3.359,664,2.878,665,2.878,666,2.878,667,2.878,668,2.878,669,2.878,670,2.878]],["title/miscellaneous/variables.html",[567,1.68,671,3.144]],["body/miscellaneous/variables.html",[3,0.241,7,0.2,11,0.032,22,0.023,23,0.023,39,2.708,46,0.638,55,3.17,62,2.083,64,2.35,66,1.408,68,2.352,70,1.87,85,2.523,112,0.526,127,3.287,128,3.287,136,1.659,146,2.708,164,2.523,166,2.083,204,1.408,229,2.35,251,1.541,255,3.554,256,3.17,264,3.17,273,1.87,274,1.596,305,3.18,307,2.708,314,2.35,323,2.083,326,2.083,329,2.708,330,2.708,331,2.708,332,2.083,417,2.708,430,2.35,519,2.708,520,4.133,522,2.708,527,2.708,528,3.652,532,2.708,567,2.083,671,2.708,672,3.25,673,3.25,674,3.25,675,3.25,676,3.25,677,3.25,678,4.384,679,3.25,680,4.384,681,4.384,682,3.25,683,4.961,684,3.25,685,3.25,686,3.25,687,3.25,688,4.384]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":509,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["0.1.13",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":663,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.4.6",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":135,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"entities/Login.html":{},"overview.html":{}}}],["100",{"_index":133,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["2",{"_index":661,"title":{},"body":{"overview.html":{}}}],["2.3.3",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3h",{"_index":429,"title":{},"body":{"modules/UserModule.html":{}}}],["4.0.0",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["5.2.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":662,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["abouve",{"_index":189,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["access/global.access",{"_index":312,"title":{},"body":{"guards/RolesGuards.html":{}}}],["admin",{"_index":315,"title":{},"body":{"guards/RolesGuards.html":{}}}],["age",{"_index":343,"title":{},"body":{"entities/User.html":{},"classes/userDto.html":{}}}],["agent",{"_index":219,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["amazing",{"_index":618,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":245,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["apis",{"_index":307,"title":{},"body":{"guards/RolesGuards.html":{},"miscellaneous/variables.html":{}}}],["apitags",{"_index":400,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('user",{"_index":404,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":591,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":25,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":13,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":497,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":177,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":512,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["async",{"_index":114,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"entities/Login.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["author",{"_index":627,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["avaliabale",{"_index":314,"title":{},"body":{"guards/RolesGuards.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["avaliable",{"_index":273,"title":{},"body":{"classes/Maintenance.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":151,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"entities/Login.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["backers",{"_index":619,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":82,"title":{"classes/BadRequest.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["badrequestexception",{"_index":500,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":510,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["based",{"_index":188,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["bcrypt",{"_index":255,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(data.password",{"_index":471,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt.hash(this.password",{"_index":268,"title":{},"body":{"entities/Login.html":{}}}],["bcryptjs",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["beforeinsert",{"_index":247,"title":{},"body":{"entities/Login.html":{}}}],["below",{"_index":191,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["body",{"_index":393,"title":{},"body":{"controllers/UserController.html":{}}}],["boolean",{"_index":291,"title":{},"body":{"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"injectables/ValidationPipe.html":{}}}],["bootstrap",{"_index":539,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":659,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":657,"title":{},"body":{"modules.html":{}}}],["building",{"_index":586,"title":{},"body":{"index.html":{}}}],["business",{"_index":431,"title":{},"body":{"injectables/UserService.html":{}}}],["cache",{"_index":138,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"dependencies.html":{}}}],["cached",{"_index":149,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["cachekey",{"_index":520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cachekeyvalue",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachemanager",{"_index":143,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["cachemanager.caching",{"_index":129,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["cachemanagerinterceptor",{"_index":106,"title":{"injectables/CacheManagerInterceptor.html":{}},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["callhandler",{"_index":122,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["canactivate",{"_index":308,"title":{},"body":{"guards/RolesGuards.html":{}}}],["canactivate(context",{"_index":310,"title":{},"body":{"guards/RolesGuards.html":{}}}],["cascade",{"_index":353,"title":{},"body":{"entities/User.html":{}}}],["catch",{"_index":175,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":176,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":181,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["chche",{"_index":109,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["class",{"_index":9,"title":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["classes",{"_index":83,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"classes/loginDto.html":{},"overview.html":{},"classes/userDto.html":{}}}],["cluster_appmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":413,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":414,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":248,"title":{},"body":{"entities/Login.html":{},"classes/Maintenance.html":{},"entities/User.html":{}}}],["column()@apiproperty",{"_index":236,"title":{},"body":{"entities/Login.html":{}}}],["column()@apiproperty()@isint",{"_index":346,"title":{},"body":{"entities/User.html":{}}}],["column()@apiproperty()@isstring",{"_index":348,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":285,"title":{},"body":{"classes/Maintenance.html":{}}}],["column({unique",{"_index":242,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["columns",{"_index":272,"title":{},"body":{"classes/Maintenance.html":{}}}],["commom",{"_index":579,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common/access/global.access",{"_index":449,"title":{},"body":{"injectables/UserService.html":{}}}],["common/filters/exception.filter",{"_index":385,"title":{},"body":{"controllers/UserController.html":{}}}],["common/middleware/logger.middleware",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["common/providers/jwt.service",{"_index":420,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["config/typeorm/typeorm.config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["configurations",{"_index":417,"title":{},"body":{"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["configure(consumer",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["constant",{"_index":150,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["constants",{"_index":190,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"classes/Unauthorized.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["constructor(jwtservice",{"_index":640,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["constructor(private",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/jwtServiceClass.html":{}}}],["constructor(reflector",{"_index":116,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["constructor(userrepository",{"_index":435,"title":{},"body":{"injectables/UserService.html":{}}}],["consumer",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["contentlength",{"_index":221,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["context",{"_index":125,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["context.gethandler",{"_index":148,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('user",{"_index":405,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":392,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["coverage",{"_index":514,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":373,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["createdat",{"_index":284,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdate",{"_index":288,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdby",{"_index":275,"title":{},"body":{"classes/Maintenance.html":{}}}],["createddate",{"_index":276,"title":{},"body":{"classes/Maintenance.html":{}}}],["createdocument",{"_index":531,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdtime",{"_index":277,"title":{},"body":{"classes/Maintenance.html":{}}}],["createjwttoken",{"_index":637,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["createjwttoken(login",{"_index":643,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["createtime",{"_index":290,"title":{},"body":{"classes/Maintenance.html":{}}}],["createuser",{"_index":366,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body(validationpipe",{"_index":408,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":369,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["creation",{"_index":351,"title":{},"body":{"entities/User.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["credentials",{"_index":475,"title":{},"body":{"injectables/UserService.html":{}}}],["credimport",{"_index":384,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ctx",{"_index":182,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":185,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":184,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["custom",{"_index":85,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":334,"title":{},"body":{"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.name",{"_index":464,"title":{},"body":{"injectables/UserService.html":{}}}],["data.password",{"_index":460,"title":{},"body":{"injectables/UserService.html":{}}}],["data.role",{"_index":462,"title":{},"body":{"injectables/UserService.html":{}}}],["data.username",{"_index":458,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":197,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date().tolocaledatestring",{"_index":298,"title":{},"body":{"classes/Maintenance.html":{}}}],["date().tolocaletimestring",{"_index":299,"title":{},"body":{"classes/Maintenance.html":{}}}],["declared",{"_index":328,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{}}}],["decorator",{"_index":680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":233,"title":{},"body":{"entities/Login.html":{},"classes/Maintenance.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["default",{"_index":127,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["delete",{"_index":389,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["delete('logoutuser",{"_index":387,"title":{},"body":{"controllers/UserController.html":{}}}],["deletetoken",{"_index":638,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["deletetoken(response",{"_index":645,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["dependencies",{"_index":27,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":597,"title":{},"body":{"index.html":{}}}],["disable",{"_index":258,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["document",{"_index":581,"title":{},"body":{"miscellaneous/functions.html":{}}}],["documentation",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":654,"title":{},"body":{"classes/loginDto.html":{},"classes/userDto.html":{}}}],["dto/login.dto",{"_index":401,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user.dto",{"_index":403,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dummy",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["e2e",{"_index":608,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":587,"title":{},"body":{"index.html":{}}}],["email",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["enception",{"_index":86,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["entire",{"_index":172,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["entities",{"_index":228,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/login.entity",{"_index":423,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["entities/user.entity",{"_index":419,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":226,"title":{"entities/Login.html":{},"entities/User.html":{}},"body":{"entities/Login.html":{},"classes/Maintenance.html":{},"entities/User.html":{},"coverage.html":{}}}],["errors",{"_index":506,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":508,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["eslint",{"_index":257,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["eslint/no",{"_index":261,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["exception",{"_index":179,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":187,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":201,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":174,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptions",{"_index":171,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["execution",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["executioncontext",{"_index":120,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["expiresin",{"_index":428,"title":{},"body":{"modules/UserModule.html":{}}}],["export",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["express",{"_index":180,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["extends",{"_index":87,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"entities/Login.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["failed",{"_index":511,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["false",{"_index":321,"title":{},"body":{"guards/RolesGuards.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["final",{"_index":155,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["find",{"_index":170,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/UserService.html":{}}}],["finduser",{"_index":433,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser(username",{"_index":441,"title":{},"body":{"injectables/UserService.html":{}}}],["forbidden",{"_index":92,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["forbiddenexception",{"_index":93,"title":{"classes/ForbiddenException.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["found",{"_index":101,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["framework",{"_index":585,"title":{},"body":{"index.html":{}}}],["fro",{"_index":681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":568,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":344,"title":{},"body":{"entities/User.html":{},"classes/userDto.html":{}}}],["generates",{"_index":283,"title":{},"body":{"classes/Maintenance.html":{}}}],["gethello",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrole",{"_index":434,"title":{},"body":{"injectables/UserService.html":{}}}],["getrole(request",{"_index":443,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":582,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":468,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser.password",{"_index":472,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser.role",{"_index":479,"title":{},"body":{"injectables/UserService.html":{}}}],["globalaccess",{"_index":161,"title":{"classes/GlobalAccess.html":{}},"body":{"classes/GlobalAccess.html":{},"guards/RolesGuards.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["globalaccess.role",{"_index":318,"title":{},"body":{"guards/RolesGuards.html":{},"injectables/UserService.html":{}}}],["grow",{"_index":614,"title":{},"body":{"index.html":{}}}],["guard",{"_index":301,"title":{"guards/RolesGuards.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":303,"title":{},"body":{"guards/RolesGuards.html":{}}}],["hash",{"_index":256,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["hello",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":274,"title":{},"body":{"classes/Maintenance.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":183,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexception",{"_index":88,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpexceptionfilter",{"_index":168,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["httponly",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":631,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":91,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.bad_request",{"_index":105,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.forbidden",{"_index":95,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.not_found",{"_index":102,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["httpstatus.unauthorized",{"_index":98,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["id",{"_index":230,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["identifier",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"injectables/ValidationPipe.html":{}}}],["implemeted",{"_index":192,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["imported",{"_index":382,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":112,"title":{"index.html":{}},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":77,"title":{"injectables/AppService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}},"body":{"injectables/AppService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{}}}],["injectables",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"overview.html":{}}}],["injectrepository",{"_index":453,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(login",{"_index":456,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(user",{"_index":455,"title":{},"body":{"injectables/UserService.html":{}}}],["inputs",{"_index":489,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["installation",{"_index":594,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":596,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":115,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["intercept(context",{"_index":119,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["interceptor",{"_index":111,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["interface",{"_index":322,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":324,"title":{},"body":{"interfaces/SwaggerConfig.html":{}}}],["intiels",{"_index":380,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ip",{"_index":215,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["isactive",{"_index":278,"title":{},"body":{"classes/Maintenance.html":{}}}],["isint",{"_index":358,"title":{},"body":{"entities/User.html":{}}}],["isstring",{"_index":359,"title":{},"body":{"entities/User.html":{}}}],["join",{"_index":621,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":249,"title":{},"body":{"entities/Login.html":{}}}],["jwt",{"_index":390,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["jwtmodule",{"_index":421,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtmodule.register",{"_index":425,"title":{},"body":{"modules/UserModule.html":{}}}],["jwtservice",{"_index":641,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["jwtserviceclass",{"_index":415,"title":{"injectables/jwtServiceClass.html":{}},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"overview.html":{}}}],["kamil",{"_index":628,"title":{},"body":{"index.html":{}}}],["key",{"_index":146,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["length",{"_index":223,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["library",{"_index":383,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":634,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":612,"title":{},"body":{"index.html":{}}}],["line",{"_index":259,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["localhost",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":203,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logger(loggermiddleware.name",{"_index":212,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":57,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggin",{"_index":211,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logics",{"_index":432,"title":{},"body":{"injectables/UserService.html":{}}}],["login",{"_index":227,"title":{"entities/Login.html":{}},"body":{"entities/Login.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{}}}],["login.createdby",{"_index":463,"title":{},"body":{"injectables/UserService.html":{}}}],["login.entity",{"_index":361,"title":{},"body":{"entities/User.html":{}}}],["login.password",{"_index":459,"title":{},"body":{"injectables/UserService.html":{}}}],["login.role",{"_index":461,"title":{},"body":{"injectables/UserService.html":{}}}],["login.user",{"_index":352,"title":{},"body":{"entities/User.html":{}}}],["login.username",{"_index":457,"title":{},"body":{"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["logindto",{"_index":377,"title":{"classes/loginDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/loginDto.html":{}}}],["loginrepository",{"_index":437,"title":{},"body":{"injectables/UserService.html":{}}}],["loginuser",{"_index":367,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["loginuser(data",{"_index":376,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logout",{"_index":451,"title":{},"body":{"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["logoutuser",{"_index":368,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logoutuser(response",{"_index":386,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["main",{"_index":571,"title":{},"body":{"miscellaneous/functions.html":{}}}],["maintanance",{"_index":271,"title":{},"body":{"classes/Maintenance.html":{}}}],["maintanance.entity",{"_index":253,"title":{},"body":{"entities/Login.html":{}}}],["maintenance",{"_index":252,"title":{"classes/Maintenance.html":{}},"body":{"entities/Login.html":{},"classes/Maintenance.html":{},"coverage.html":{}}}],["manager",{"_index":110,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"dependencies.html":{}}}],["manager.interceptor.ts",{"_index":108,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["manager.interceptor.ts:17",{"_index":118,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["manager.interceptor.ts:22",{"_index":123,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["match",{"_index":470,"title":{},"body":{"injectables/UserService.html":{}}}],["matching",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":132,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["memory",{"_index":131,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["message",{"_index":200,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["metatype",{"_index":495,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methjod",{"_index":636,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["method",{"_index":124,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["methods",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["middleware",{"_index":205,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["middlewareconsumer",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":567,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":611,"title":{},"body":{"index.html":{}}}],["mockthon",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":601,"title":{},"body":{"index.html":{}}}],["module",{"_index":24,"title":{"modules/AppModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":26,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/user/user.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":624,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":629,"title":{},"body":{"index.html":{}}}],["name",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/userDto.html":{}}}],["nest",{"_index":592,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":633,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":139,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["nestjs",{"_index":578,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"classes/Unauthorized.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["nestjs/core",{"_index":144,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":422,"title":{},"body":{"modules/UserModule.html":{},"dependencies.html":{},"injectables/jwtServiceClass.html":{}}}],["nestjs/platform",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":246,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{},"controllers/UserController.html":{},"dependencies.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["nestjs/typeorm",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":214,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":196,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["newdata",{"_index":465,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":121,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"injectables/UserService.html":{}}}],["next.handle().pipe",{"_index":157,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["nextfunction",{"_index":209,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["node.js",{"_index":584,"title":{},"body":{"index.html":{}}}],["notfound",{"_index":99,"title":{"classes/NotFound.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["npm",{"_index":595,"title":{},"body":{"index.html":{}}}],["number",{"_index":232,"title":{},"body":{"entities/Login.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/ValidationPipe.html":{},"classes/userDto.html":{}}}],["object",{"_index":504,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["object.assign(user",{"_index":466,"title":{},"body":{"injectables/UserService.html":{}}}],["observable",{"_index":140,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["onetoone",{"_index":250,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":239,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["open",{"_index":613,"title":{},"body":{"index.html":{}}}],["openapiobject",{"_index":580,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["originalurl",{"_index":216,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["out",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":320,"title":{},"body":{"guards/RolesGuards.html":{}}}],["overview",{"_index":660,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":542,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":407,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["parameters",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["parser",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["passport",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["passthrough",{"_index":410,"title":{},"body":{"controllers/UserController.html":{}}}],["password",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"classes/TypeOrmInterface.html":{},"injectables/UserService.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":198,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["phonenumber",{"_index":345,"title":{},"body":{"entities/User.html":{},"classes/userDto.html":{}}}],["pipetransform",{"_index":499,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass",{"_index":501,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":505,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["please",{"_index":622,"title":{},"body":{"index.html":{}}}],["port",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"classes/TypeOrmInterface.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":394,"title":{},"body":{"controllers/UserController.html":{}}}],["post('adduser",{"_index":371,"title":{},"body":{"controllers/UserController.html":{}}}],["post('loginuser",{"_index":378,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":364,"title":{},"body":{"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":234,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["private",{"_index":206,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["production",{"_index":603,"title":{},"body":{"index.html":{}}}],["program",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["progressive",{"_index":583,"title":{},"body":{"index.html":{}}}],["project",{"_index":173,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["promise",{"_index":126,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["properties",{"_index":113,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["property",{"_index":494,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["prot",{"_index":339,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["protuct",{"_index":306,"title":{},"body":{"guards/RolesGuards.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["read",{"_index":623,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["reflect",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":117,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{}}}],["related",{"_index":204,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"classes/Maintenance.html":{},"interfaces/SwaggerConfig.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":436,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":104,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"injectables/UserService.html":{}}}],["request.cookies['jwt",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["request.get('user",{"_index":218,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["request.url",{"_index":199,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('bcryptjs",{"_index":264,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":263,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["res",{"_index":395,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":156,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["response.clearcookie('jwt",{"_index":653,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["response.cookie('jwt",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["response.get('content",{"_index":222,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.on('finish",{"_index":220,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["response.status(status).json",{"_index":193,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"modules.html":{},"overview.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["retuimport",{"_index":446,"title":{},"body":{"injectables/UserService.html":{}}}],["retun",{"_index":153,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/CacheManagerInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["returns",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{}}}],["rimraf",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["rn",{"_index":447,"title":{},"body":{"injectables/UserService.html":{}}}],["role",{"_index":164,"title":{},"body":{"classes/GlobalAccess.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":305,"title":{},"body":{"guards/RolesGuards.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles.includes('admin",{"_index":317,"title":{},"body":{"guards/RolesGuards.html":{}}}],["roles.includes('user",{"_index":319,"title":{},"body":{"guards/RolesGuards.html":{}}}],["rolesguards",{"_index":302,"title":{"guards/RolesGuards.html":{}},"body":{"guards/RolesGuards.html":{},"coverage.html":{}}}],["root",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roturs",{"_index":365,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":598,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":142,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"dependencies.html":{}}}],["save",{"_index":154,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["scalable",{"_index":588,"title":{},"body":{"index.html":{}}}],["secret",{"_index":426,"title":{},"body":{"modules/UserModule.html":{}}}],["server",{"_index":589,"title":{},"body":{"index.html":{}}}],["service",{"_index":635,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["set",{"_index":163,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["setmetadata('cache",{"_index":679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":590,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":427,"title":{},"body":{"modules/UserModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BadRequest.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/ForbiddenException.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"classes/NotFound.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"classes/Unauthorized.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"index.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["sponsors",{"_index":616,"title":{},"body":{"index.html":{}}}],["src/.../cache.decorator.ts",{"_index":674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../login.entity.ts",{"_index":672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":569,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.config.ts",{"_index":676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":570,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.service.ts",{"_index":673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:27",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/common/access/global.access",{"_index":454,"title":{},"body":{"injectables/UserService.html":{}}}],["src/common/access/global.access.ts",{"_index":162,"title":{},"body":{"classes/GlobalAccess.html":{},"coverage.html":{}}}],["src/common/access/global.access.ts:4",{"_index":167,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["src/common/decorators/cache.decorator.ts",{"_index":519,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/custom.exception.ts",{"_index":84,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["src/common/filters/custom.exception.ts:16",{"_index":341,"title":{},"body":{"classes/Unauthorized.html":{}}}],["src/common/filters/custom.exception.ts:26",{"_index":300,"title":{},"body":{"classes/NotFound.html":{}}}],["src/common/filters/custom.exception.ts:36",{"_index":90,"title":{},"body":{"classes/BadRequest.html":{}}}],["src/common/filters/custom.exception.ts:6",{"_index":160,"title":{},"body":{"classes/ForbiddenException.html":{}}}],["src/common/filters/exception.filter",{"_index":402,"title":{},"body":{"controllers/UserController.html":{}}}],["src/common/filters/exception.filter.ts",{"_index":169,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/exception.filter.ts:16",{"_index":178,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/common/guards/roles.guards.ts",{"_index":304,"title":{},"body":{"guards/RolesGuards.html":{},"coverage.html":{}}}],["src/common/guards/roles.guards.ts:10",{"_index":309,"title":{},"body":{"guards/RolesGuards.html":{}}}],["src/common/guards/roles.guards.ts:14",{"_index":311,"title":{},"body":{"guards/RolesGuards.html":{}}}],["src/common/interceptor/cache",{"_index":107,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":202,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:11",{"_index":210,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middleware/logger.middleware.ts:9",{"_index":213,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/validation.pipes.ts",{"_index":487,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipes.ts:15",{"_index":498,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipes.ts:27",{"_index":493,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/providers/jwt.service.ts",{"_index":524,"title":{},"body":{"coverage.html":{},"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:10",{"_index":642,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:19",{"_index":644,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:25",{"_index":648,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/common/providers/jwt.service.ts:31",{"_index":646,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["src/config/swagger/swagger.config.ts",{"_index":527,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/swagger/swagger.interface.ts",{"_index":325,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{}}}],["src/config/swagger/swagger.ts",{"_index":529,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/config/typeorm/typeorm.config.ts",{"_index":532,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm/typeorm.interface.ts",{"_index":333,"title":{},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{}}}],["src/config/typeorm/typeorm.interface.ts:10",{"_index":340,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:12",{"_index":337,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:14",{"_index":335,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:6",{"_index":336,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/config/typeorm/typeorm.interface.ts:8",{"_index":338,"title":{},"body":{"classes/TypeOrmInterface.html":{}}}],["src/entities/login.entity.ts",{"_index":229,"title":{},"body":{"entities/Login.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/login.entity.ts:22",{"_index":235,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:26",{"_index":244,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:30",{"_index":237,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:34",{"_index":238,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/login.entity.ts:43",{"_index":241,"title":{},"body":{"entities/Login.html":{}}}],["src/entities/maintanance.entity.ts",{"_index":270,"title":{},"body":{"classes/Maintenance.html":{},"coverage.html":{}}}],["src/entities/maintanance.entity.ts:11",{"_index":292,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:16",{"_index":293,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:21",{"_index":282,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:26",{"_index":295,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:31",{"_index":287,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:37",{"_index":289,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/maintanance.entity.ts:43",{"_index":296,"title":{},"body":{"classes/Maintenance.html":{}}}],["src/entities/user.entity.ts",{"_index":342,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:13",{"_index":350,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:19",{"_index":355,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:25",{"_index":357,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:31",{"_index":347,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:37",{"_index":349,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:41",{"_index":354,"title":{},"body":{"entities/User.html":{}}}],["src/main.ts",{"_index":538,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/user/dto/login.dto.ts",{"_index":535,"title":{},"body":{"coverage.html":{},"classes/loginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:12",{"_index":655,"title":{},"body":{"classes/loginDto.html":{}}}],["src/modules/user/dto/login.dto.ts:8",{"_index":656,"title":{},"body":{"classes/loginDto.html":{}}}],["src/modules/user/dto/user.dto.ts",{"_index":536,"title":{},"body":{"coverage.html":{},"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:12",{"_index":664,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:16",{"_index":665,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:20",{"_index":668,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:24",{"_index":670,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:28",{"_index":667,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:32",{"_index":669,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/dto/user.dto.ts:8",{"_index":666,"title":{},"body":{"classes/userDto.html":{}}}],["src/modules/user/user.controller.ts",{"_index":363,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:32",{"_index":372,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:44",{"_index":379,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:57",{"_index":388,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":416,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":430,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/user/user.service.ts:18",{"_index":438,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:32",{"_index":440,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:53",{"_index":445,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:73",{"_index":442,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:83",{"_index":444,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:95",{"_index":450,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":599,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":602,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":604,"title":{},"body":{"index.html":{}}}],["started",{"_index":574,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{}}}],["starter",{"_index":593,"title":{},"body":{"index.html":{}}}],["statements",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":165,"title":{},"body":{"classes/GlobalAccess.html":{}}}],["status",{"_index":186,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":194,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["stay",{"_index":625,"title":{},"body":{"index.html":{}}}],["store",{"_index":130,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["stote",{"_index":137,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["string",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/GlobalAccess.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{}}}],["strongpassword",{"_index":266,"title":{},"body":{"entities/Login.html":{}}}],["success",{"_index":381,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["successimport",{"_index":448,"title":{},"body":{"injectables/UserService.html":{}}}],["super('bad",{"_index":103,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('forbidden",{"_index":94,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('not",{"_index":100,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["super('unauthorized",{"_index":97,"title":{},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{}}}],["support",{"_index":617,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":658,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":326,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["swagger_config",{"_index":528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconfig",{"_index":323,"title":{"interfaces/SwaggerConfig.html":{}},"body":{"interfaces/SwaggerConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["synchronize",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":329,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["taken",{"_index":374,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tap",{"_index":141,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["tap((response",{"_index":158,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["template",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":607,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":610,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":609,"title":{},"body":{"index.html":{}}}],["tests",{"_index":606,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":615,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["this.finduser(tokendata.email",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.signasync",{"_index":650,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":652,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["this.jwtserviceclass.createjwttoken(getuser",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtserviceclass.deletetoken(response",{"_index":486,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtserviceclass.verifyjwttoken(token",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log",{"_index":224,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.loginrepository.findone",{"_index":469,"title":{},"body":{"injectables/UserService.html":{}}}],["this.manager.get(key",{"_index":152,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.manager.set(key",{"_index":159,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.password",{"_index":267,"title":{},"body":{"entities/Login.html":{}}}],["this.reflector.get('cache",{"_index":147,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["this.reflector.get('roles",{"_index":313,"title":{},"body":{"guards/RolesGuards.html":{}}}],["this.tovalidate(metatype",{"_index":503,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.userrepository.save(newdata",{"_index":467,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(data",{"_index":409,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.loginuser(data",{"_index":411,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.logoutuser(response",{"_index":412,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":473,"title":{},"body":{"injectables/UserService.html":{},"injectables/ValidationPipe.html":{}}}],["timestamp",{"_index":195,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":330,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":391,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{}}}],["tokendata",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["touch",{"_index":626,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":490,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":492,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform",{"_index":491,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":496,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":502,"title":{},"body":{"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["true})@apiproperty",{"_index":243,"title":{},"body":{"entities/Login.html":{}}}],["true})@apiproperty()@isstring",{"_index":356,"title":{},"body":{"entities/User.html":{}}}],["ttl",{"_index":134,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{}}}],["twitter",{"_index":632,"title":{},"body":{"index.html":{}}}],["type",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"classes/Maintenance.html":{},"guards/RolesGuards.html":{},"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":251,"title":{},"body":{"entities/Login.html":{},"classes/Maintenance.html":{},"classes/TypeOrmInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormconfig.database",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.host",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.password",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormconfig.username",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["typeorminterface",{"_index":332,"title":{"classes/TypeOrmInterface.html":{}},"body":{"classes/TypeOrmInterface.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":424,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":327,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"classes/TypeOrmInterface.html":{},"injectables/ValidationPipe.html":{}}}],["types.includes(metatype",{"_index":513,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["typescript",{"_index":260,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{},"index.html":{}}}],["ui",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":96,"title":{"classes/Unauthorized.html":{}},"body":{"classes/BadRequest.html":{},"classes/ForbiddenException.html":{},"classes/NotFound.html":{},"classes/Unauthorized.html":{},"coverage.html":{}}}],["unauthorizedexception",{"_index":452,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception('incorrect",{"_index":474,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":286,"title":{},"body":{"classes/Maintenance.html":{},"injectables/ValidationPipe.html":{}}}],["unique",{"_index":265,"title":{},"body":{"entities/Login.html":{},"entities/User.html":{}}}],["unit",{"_index":605,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":375,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"injectables/jwtServiceClass.html":{}}}],["upadetdtime",{"_index":297,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedat",{"_index":294,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedby",{"_index":279,"title":{},"body":{"classes/Maintenance.html":{}}}],["updateddate",{"_index":280,"title":{},"body":{"classes/Maintenance.html":{}}}],["updatedtime",{"_index":281,"title":{},"body":{"classes/Maintenance.html":{}}}],["use",{"_index":207,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use(request",{"_index":208,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["used",{"_index":136,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"entities/Login.html":{},"guards/RolesGuards.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usefilters",{"_index":396,"title":{},"body":{"controllers/UserController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":406,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":231,"title":{"entities/User.html":{}},"body":{"entities/Login.html":{},"guards/RolesGuards.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/jwtServiceClass.html":{},"classes/userDto.html":{}}}],["user.controller",{"_index":418,"title":{},"body":{"modules/UserModule.html":{}}}],["user.entity",{"_index":254,"title":{},"body":{"entities/Login.html":{}}}],["user.login",{"_index":269,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["user.login)@joincolumn",{"_index":240,"title":{},"body":{"entities/Login.html":{}}}],["user.service",{"_index":399,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["useragent",{"_index":217,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useragent}${ip",{"_index":225,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["usercontroller",{"_index":362,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":370,"title":{"classes/userDto.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/userDto.html":{}}}],["usermodule",{"_index":31,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"entities/Login.html":{},"classes/TypeOrmInterface.html":{},"injectables/UserService.html":{},"injectables/jwtServiceClass.html":{},"classes/loginDto.html":{},"classes/userDto.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":439,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":398,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":488,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":507,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationpipe",{"_index":397,"title":{"injectables/ValidationPipe.html":{}},"body":{"controllers/UserController.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":360,"title":{},"body":{"entities/User.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":128,"title":{},"body":{"injectables/CacheManagerInterceptor.html":{},"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":262,"title":{},"body":{"entities/Login.html":{},"injectables/UserService.html":{}}}],["variable",{"_index":166,"title":{},"body":{"classes/GlobalAccess.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":671,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":649,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifyjwttoken",{"_index":639,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifyjwttoken(token",{"_index":647,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["verifytoken",{"_index":651,"title":{},"body":{"injectables/jwtServiceClass.html":{}}}],["version",{"_index":331,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["watch",{"_index":600,"title":{},"body":{"index.html":{}}}],["website",{"_index":630,"title":{},"body":{"index.html":{}}}],["worked",{"_index":316,"title":{},"body":{"guards/RolesGuards.html":{}}}],["world",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":620,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is dummy class\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * This is dummy class\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmConfig } from './Config/TypeOrm/typeorm.config';\nimport { LoggerMiddleware } from './Common/MiddleWare/logger.middleware';\nimport { UserModule } from './Modules/user/user.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: TypeOrmConfig.host,\n      port: TypeOrmConfig.port,\n      username: TypeOrmConfig.username,\n      password: TypeOrmConfig.password,\n      database: TypeOrmConfig.database,\n      autoLoadEntities: true,\n      synchronize: true\n    }),\n    UserModule\n  ],\n  controllers: [AppController],\n  providers: [AppService]\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is dummy class\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * This is dummy class\n */\n@Injectable()\nexport class AppService {\n  // getHello(): string {\n  //   return 'Hello World!';\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequest.html":{"url":"classes/BadRequest.html","title":"class - BadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom BadRequest Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:36\n                            \n                        \n\n                \n                    \n                            This is a  BadRequest constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheManagerInterceptor.html":{"url":"injectables/CacheManagerInterceptor.html","title":"injectable - CacheManagerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheManagerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/interceptor/cache-manager.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a chche manager interceptor class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                manager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/Common/interceptor/cache-manager.interceptor.ts:17\n                            \n                        \n\n                \n                    \n                            this is constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/interceptor/cache-manager.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    async interceptor method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Default value : cacheManager.caching({ store: 'memory', max: 100, ttl: 10 })\n                    \n                \n                    \n                        \n                                Defined in src/Common/interceptor/cache-manager.interceptor.ts:17\n                        \n                    \n\n            \n                \n                    This is used to stote the cache value\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\nimport * as cacheManager from 'cache-manager';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * This is a chche manager interceptor class\n */\n@Injectable()\nexport class CacheManagerInterceptor implements NestInterceptor {\n  /**This is used to stote the cache value */\n  manager = cacheManager.caching({ store: 'memory', max: 100, ttl: 10 });\n  /**this is constructor */\n  constructor(private reflector: Reflector) {}\n\n  /**async interceptor method */\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler\n  ): Promise> {\n    const key = this.reflector.get('cache-key', context.getHandler());\n\n    /**This is cached constant */\n    const cached: any = await this.manager.get(key);\n\n    /**If cache is there retun the save */\n    if (cached) {\n      return cached;\n    }\n    /**final response */\n    return next.handle().pipe(\n      tap((response) => {\n        this.manager.set(key, response);\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForbiddenException.html":{"url":"classes/ForbiddenException.html","title":"class - ForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom forbidden Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:6\n                            \n                        \n\n                \n                    \n                            This is a  Forbidden constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalAccess.html":{"url":"classes/GlobalAccess.html","title":"class - GlobalAccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalAccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Access/global.access.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to set the role in static variable\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ' '\n                    \n                \n                    \n                        \n                                Defined in src/Common/Access/global.access.ts:4\n                        \n                    \n\n            \n                \n                    static variable\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GlobalAccess {\n  /**static variable */\n  static role = ' ';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is used to find the exceptions for entire project\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n                    This class is used to find the exceptions for entire project\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n/**\n * This class is used to find the exceptions for entire project\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * This class is used to find the exceptions for entire project\n   */\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n    /**\n     * Based on abouve constants below method is implemeted\n     */\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/MiddleWare/logger.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to return the logger related info based on middleware\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/MiddleWare/logger.middleware.ts:11\n                \n            \n\n\n            \n                \n                    This method is used to return the loggin info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LoggerMiddleware.name)\n                    \n                \n                    \n                        \n                                Defined in src/Common/MiddleWare/logger.middleware.ts:9\n                        \n                    \n\n            \n                \n                    This is a private variable\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { NextFunction, Request, Response } from 'express';\n/**\n * This method is used to return the logger related info based on middleware\n */\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  /**This is a private variable */\n  private logger = new Logger(LoggerMiddleware.name);\n  /**This method is used to return the loggin info */\n  use(request: Request, response: Response, next: NextFunction): void {\n    const { ip, method, originalUrl } = request;\n    const userAgent = request.get('user-agent') || '';\n    response.on('finish', () => {\n      const { statusCode } = response;\n      const contentLength = response.get('content-length');\n      this.logger.log(\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n      this.logger.log(\n        'info',\n        `${method} ${originalUrl} ${statusCode} ${contentLength}-${userAgent}${ip}`\n      );\n    });\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Login.html":{"url":"entities/Login.html","title":"entity - Login","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/login.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                user\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.login)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/login.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  BeforeInsert,\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { Maintenance } from './maintanance.entity';\nimport { User } from './user.entity';\n/**This bcrypt is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n\n/**\n * This is login entity\n */\n@Entity()\nexport class Login extends Maintenance {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  @ApiProperty()\n  username: string;\n\n  @Column()\n  @ApiProperty()\n  password: string;\n\n  @Column()\n  @ApiProperty()\n  role: string;\n\n  @BeforeInsert()\n  async strongPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n\n  @OneToOne(() => User, (user) => user.login)\n  @JoinColumn()\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Maintenance.html":{"url":"classes/Maintenance.html","title":"class - Maintenance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Maintenance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/maintanance.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a maintenance entity all maintanance related columns are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdBy\n                            \n                            \n                                createdDate\n                            \n                            \n                                createdTime\n                            \n                            \n                                isActive\n                            \n                            \n                                updatedBy\n                            \n                            \n                                updatedDate\n                            \n                            \n                                updatedTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:21\n                        \n                    \n\n            \n                \n                    generates createdAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:31\n                        \n                    \n\n            \n                \n                    generates createdate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:37\n                        \n                    \n\n            \n                \n                    generates createTime column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:11\n                        \n                    \n\n            \n                \n                    generates isActive column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:16\n                        \n                    \n\n            \n                \n                    generates updatedAt column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:26\n                        \n                    \n\n            \n                \n                    generates updatedDate column\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: ' '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/maintanance.entity.ts:43\n                        \n                    \n\n            \n                \n                    generates UpadetdTime column\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column } from 'typeorm';\n\n/**\n * This is a maintenance entity all maintanance related columns are avaliable here\n */\nexport class Maintenance {\n  /**\n   * generates isActive column\n   */\n  @Column({ default: true })\n  isActive: boolean;\n  /**\n   *generates updatedAt column\n   */\n  @Column({ default: ' ' })\n  updatedBy: string;\n  /**\n   *generates createdAt column\n   */\n  @Column()\n  createdBy: string;\n  /**\n   *generates updatedDate column\n   */\n  @Column({ default: ' ' })\n  updatedDate: string;\n  /**\n   * generates createdate column\n   */\n  @Column({ default: new Date().toLocaleDateString() })\n  createdDate: string;\n\n  /**\n   * generates createTime column\n   */\n  @Column({ default: new Date().toLocaleTimeString() })\n  createdTime: string;\n\n  /**\n   * generates UpadetdTime column\n   */\n  @Column({ default: ' ' })\n  updatedTime: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFound.html":{"url":"classes/NotFound.html","title":"class - NotFound","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFound\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom NotFound Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:26\n                            \n                        \n\n                \n                    \n                            This is a  NotFound constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuards.html":{"url":"guards/RolesGuards.html","title":"guard - RolesGuards","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuards\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/Common/Guards/roles.guards.ts\n            \n\n\n                \n                Description\n                \n                \n                    This is a roles guards file this file is used to protuct the apis\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Guards/roles.guards.ts:10\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Guards/roles.guards.ts:14\n                \n            \n\n\n            \n                \n                    This method is used to protuct the apis\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { GlobalAccess } from '../Access/global.access';\n\n/**\n * This is a roles guards file this file is used to protuct the apis\n */\n@Injectable()\nexport class RolesGuards implements CanActivate {\n  /**constructor */\n  constructor(private readonly reflector: Reflector) {}\n  /**This method is used to protuct the apis */\n  canActivate(\n    context: ExecutionContext\n  ): boolean | Promise | Observable {\n    /**This constant is used to get the roles */\n    const roles = this.reflector.get('roles', context.getHandler());\n    /**if roles avaliabale return the save */\n    if (!roles) {\n      return true;\n    }\n    /**If role is admin this method is worked */\n    if (roles.includes('admin') && GlobalAccess.role === 'admin') {\n      return true;\n    }\n    /**If role is user this method is worked */\n    if (roles.includes('user') && GlobalAccess.role === 'user') {\n      return true;\n    }\n    /**return the output */\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/Swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                swagger related types is declared here\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Tags\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            Version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Description for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Tags for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a title for swagger\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    This is a Version for swagger\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  /**This is a title for swagger */\n  Title: string;\n  /**This is a Description for swagger */\n  Description: string;\n  /**This is a Version for swagger */\n  Version: string;\n  /**This is a Tags for swagger */\n  Tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeOrmInterface.html":{"url":"classes/TypeOrmInterface.html","title":"class - TypeOrmInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeOrmInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Config/TypeOrm/typeorm.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                TypeOrm data types Declared here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                database\n                            \n                            \n                                host\n                            \n                            \n                                password\n                            \n                            \n                                port\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        database\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:14\n                        \n                    \n\n            \n                \n                    database\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        host\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:6\n                        \n                    \n\n            \n                \n                    Host name\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:12\n                        \n                    \n\n            \n                \n                    Password\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:8\n                        \n                    \n\n            \n                \n                    prot number\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/Config/TypeOrm/typeorm.interface.ts:10\n                        \n                    \n\n            \n                \n                    username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TypeOrmInterface {\n  /**Host name */\n  host: string;\n  /**prot number */\n  port: number;\n  /**username*/\n  username: string;\n  /**Password */\n  password: string;\n  /**database */\n  database: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Unauthorized.html":{"url":"classes/Unauthorized.html","title":"class - Unauthorized","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Unauthorized\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Filters/custom.exception.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a custom Unauthorized Enception\n\n            \n\n            \n                Extends\n            \n            \n                    HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/Common/Filters/custom.exception.ts:16\n                            \n                        \n\n                \n                    \n                            This is a  Unauthorized constructor\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException, HttpStatus } from '@nestjs/common';\n\n/**\n * This is a custom forbidden Enception\n */\nexport class ForbiddenException extends HttpException {\n  /**This is a  Forbidden constructor*/\n  constructor() {\n    super('Forbidden', HttpStatus.FORBIDDEN);\n  }\n}\n\n/**\n * This is a custom Unauthorized Enception\n */\nexport class Unauthorized extends HttpException {\n  /**This is a  Unauthorized constructor*/\n  constructor() {\n    super('unauthorized', HttpStatus.UNAUTHORIZED);\n  }\n}\n\n/**\n * This is a custom NotFound Enception\n */\nexport class NotFound extends HttpException {\n  /**This is a  NotFound constructor*/\n  constructor() {\n    super('not found', HttpStatus.NOT_FOUND);\n  }\n}\n\n/**\n * This is a custom BadRequest Enception\n */\nexport class BadRequest extends HttpException {\n  /**This is a  BadRequest constructor*/\n  constructor() {\n    super('bad Request', HttpStatus.BAD_REQUEST);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is user entity\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                gender\n                            \n                            \n                                id\n                            \n                            \n                                login\n                            \n                            \n                                name\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:13\n                        \n                    \n\n            \n                \n                    id creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Login\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, login => login.user, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:41\n                        \n                    \n\n            \n                \n                    login creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsString } from 'class-validator';\nimport { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { Login } from './login.entity';\n\n/**\n * This is user entity\n */\n@Entity()\nexport class User {\n  /**id creation */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  /**name creation */\n  name: string;\n\n  @Column({ unique: true })\n  @ApiProperty()\n  @IsString()\n  /**phoneNumber creation */\n  phoneNumber: string;\n\n  @Column()\n  @ApiProperty()\n  @IsInt()\n  /**age creation */\n  age: number;\n\n  @Column()\n  @ApiProperty()\n  @IsString()\n  /**gender creation */\n  gender: string;\n\n  /**login creation */\n  @OneToOne(() => Login, (login) => login.user, { cascade: true })\n  login: Login;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n            \n                Description\n            \n            \n                This is user controller all user related roturs are avaliable here\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                LoginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateUser(data: userDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('addUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:32\n                \n            \n\n\n            \n                \n                    This is a create user method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                userDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save data in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        LoginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    LoginUser(data: loginDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('LoginUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:44\n                \n            \n\n\n            \n                \n                    This is a login method\nintiels are true return success\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                loginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        in credimport { HttpExceptionFilter } from './../../Common/Filters/exception.filter';\nintiels are true return success\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('logoutUser')\n                \n            \n\n            \n                \n                    Defined in src/Modules/user/user.controller.ts:57\n                \n            \n\n\n            \n                \n                    This method is used to delete the jwt token from the cookie\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Post,\n  Res,\n  UseFilters,\n  ValidationPipe\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { loginDto } from './dto/login.dto';\nimport { Response } from 'express';\nimport { HttpExceptionFilter } from 'src/Common/Filters/exception.filter';\nimport { userDto } from './dto/user.dto';\n\n/**\n * This is user controller all user related roturs are avaliable here\n */\n@ApiTags('User')\n@Controller('user')\n@UseFilters(HttpExceptionFilter)\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * This is a create user method\n   * @param data is taken from the user\n   * @returns save data in database\n   */\n  @Post('addUser')\n  async CreateUser(@Body(ValidationPipe) data: userDto) {\n    return await this.userService.CreateUser(data);\n  }\n\n  /**\n   * This is a login method\n   * @param data is taken from the user\n   * @param response imported from the express library\n   * @returns in credimport { HttpExceptionFilter } from './../../Common/Filters/exception.filter';\nintiels are true return success\n   */\n  @Post('LoginUser')\n  async LoginUser(\n    @Body() data: loginDto,\n    @Res({ passthrough: true }) response: Response\n  ) {\n    return await this.userService.loginUser(data, response);\n  }\n\n  /**\n   * This method is used to delete the jwt token from the cookie\n   * @param response\n   * @returns\n   */\n  @Delete('logoutUser')\n  async logoutUser(response: Response): Promise {\n    return await this.userService.logoutUser(response);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\njwtServiceClass\n\njwtServiceClass\n\nUserModule -->\n\njwtServiceClass->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/Modules/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This is user module all user related configurations are avaliable here\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                        \n                            jwtServiceClass\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { jwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { JwtModule } from '@nestjs/jwt';\nimport { Login } from './../../Entities/login.entity';\n\n/**\n * This is user module all user related configurations are avaliable here\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Login]),\n    JwtModule.register({\n      secret: 'secret',\n      signOptions: { expiresIn: '3h' }\n    })\n  ],\n\n  controllers: [UserController],\n  providers: [UserService, jwtServiceClass]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a userService class all user related business logics are avaliable here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateUser\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                getRole\n                            \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, loginRepository: Repository, jwtserviceClass: jwtServiceClass)\n                    \n                \n                        \n                            \n                                Defined in src/Modules/user/user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtserviceClass\n                                                  \n                                                        \n                                                                        jwtServiceClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateUser(data: userDto)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:32\n                \n            \n\n\n            \n                \n                    This is a create user method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                userDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        save data in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:73\n                \n            \n\n\n            \n                \n                    This method is used to find user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRole(request: Request)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:83\n                \n            \n\n\n            \n                \n                    This method is used to get roles\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        loginUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(data: loginDto, response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:53\n                \n            \n\n\n            \n                \n                    This is a login method\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                loginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is taken from the user\n\n                                    \n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        imported from the express library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        in credimport { GlobalAccess } from './../../Common/Access/global.access';\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Modules/user/user.service.ts:95\n                \n            \n\n\n            \n                \n                    This is logout method used to delete the token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './../../Entities/user.entity';\nimport { loginDto } from './dto/login.dto';\nimport { jwtServiceClass } from './../../Common/Providers/jwt.service';\nimport { Request, Response } from 'express';\nimport { GlobalAccess } from 'src/Common/Access/global.access';\nimport { Login } from './../../Entities/login.entity';\nimport { userDto } from './dto/user.dto';\n/**This is used to hash the password */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst bcrypt = require('bcryptjs');\n/**\n * This is a userService class all user related business logics are avaliable here\n */\n@Injectable()\nexport class UserService {\n  /**Constructor */\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    @InjectRepository(Login)\n    private readonly loginRepository: Repository,\n    private readonly jwtserviceClass: jwtServiceClass\n  ) {}\n\n  /**\n   * This is a create user method\n   * @param data is taken from the user\n   * @returns save data in database\n   */\n  async CreateUser(data: userDto) {\n    const user = new User();\n    const login = new Login();\n    login.username = data.username;\n    login.password = data.password;\n    login.role = data.role;\n    login.createdBy = data.name;\n    user.login = login;\n    const newData = Object.assign(user, data);\n    return await this.userRepository.save(newData);\n  }\n\n  /**\n   * This is a login method\n   * @param data is taken from the user\n   * @param response imported from the express library\n   * @returns in credimport { GlobalAccess } from './../../Common/Access/global.access';\nintiels are true retuimport { Login } from './../../Entities/login.entity';\nrn successimport { userDto } from './dto/user.dto';\n\n   */\n  async loginUser(data: loginDto, response: Response) {\n    const getUser = await this.loginRepository.findOne({\n      username: data.username\n    });\n    const match = await bcrypt.compare(data.password, getUser.password);\n    if (!getUser || !match) {\n      throw new UnauthorizedException('incorrect credentials');\n    }\n    const jwt = await this.jwtserviceClass.CreateJwtToken(getUser);\n    response.cookie('jwt', jwt, { httpOnly: true });\n    GlobalAccess.role = getUser.role;\n    const { password, ...result } = getUser;\n    return result;\n  }\n\n  /**\n   * This method is used to find user\n   * @param email\n   * @returns\n   */\n  async findUser(username: string) {\n    const getUser = await this.loginRepository.findOne({ username: username });\n    return getUser;\n  }\n\n  /**\n   * This method is used to get roles\n   * @param request\n   * @returns\n   */\n  async getRole(request: Request) {\n    const token = request.cookies['jwt'];\n    const tokenData = await this.jwtserviceClass.verifyJwtToken(token);\n    const getuser = await this.findUser(tokenData.email);\n    return getuser.role;\n  }\n\n  /**\n   * This is logout method used to delete the token\n   * @param response\n   * @returns\n   */\n  async logoutUser(response: Response): Promise {\n    await this.jwtserviceClass.deleteToken(response);\n    return 'logout success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Pipes/validation.pipes.ts\n        \n\n\n            \n                Description\n            \n            \n                This method is used to validate inputs\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:27\n                \n            \n\n\n            \n                \n                    This is used to validate the property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Pipes/validation.pipes.ts:15\n                \n            \n\n\n            \n                \n                    This method is used to return the value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  BadRequestException\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n/**\n * This method is used to validate inputs\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  /**This method is used to return the value */\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n  /**This is used to validate the property */\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/Common/Access/global.access.ts\n            \n            class\n            GlobalAccess\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Decorators/cache.decorator.ts\n            \n            variable\n            CacheKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/Decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            BadRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            ForbiddenException\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            NotFound\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/custom.exception.ts\n            \n            class\n            Unauthorized\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Filters/exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/Common/Guards/roles.guards.ts\n            \n            guard\n            RolesGuards\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/MiddleWare/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/Pipes/validation.pipes.ts\n            \n            injectable\n            ValidationPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Common/Providers/jwt.service.ts\n            \n            injectable\n            jwtServiceClass\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Common/interceptor/cache-manager.interceptor.ts\n            \n            injectable\n            CacheManagerInterceptor\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.config.ts\n            \n            variable\n            SWAGGER_CONFIG\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.interface.ts\n            \n            interface\n            SwaggerConfig\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/Config/Swagger/swagger.ts\n            \n            function\n            createDocument\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/TypeOrm/typeorm.config.ts\n            \n            variable\n            TypeOrmConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Config/TypeOrm/typeorm.interface.ts\n            \n            class\n            TypeOrmInterface\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/Entities/login.entity.ts\n            \n            entity\n            Login\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/login.entity.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Entities/maintanance.entity.ts\n            \n            class\n            Maintenance\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/Entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/login.dto.ts\n            \n            class\n            loginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/Modules/user/dto/user.dto.ts\n            \n            class\n            userDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/Modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/Modules/user/user.service.ts\n            \n            variable\n            bcrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^3.6.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            mysql2 : ^2.3.3\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createDocument   (src/.../swagger.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    This is a main file program execution is started from here\n\n\n                \n            \n        \n    \n    src/Config/Swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    This function is used to create a swagger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is imported from the nestjs commom library\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        create swagger document\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/jwtServiceClass.html":{"url":"injectables/jwtServiceClass.html","title":"injectable - jwtServiceClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  jwtServiceClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Common/Providers/jwt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This is a jwt service class all jwt related methjod is avaliabale here\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                CreateJwtToken\n                            \n                            \n                                    Async\n                                deleteToken\n                            \n                            \n                                    Async\n                                verifyJwtToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtservice: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/Common/Providers/jwt.service.ts:10\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtservice\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        CreateJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    CreateJwtToken(login: Login)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:19\n                \n            \n\n\n            \n                \n                    This is create token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    login\n                                    \n                                                Login\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteToken(response: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:31\n                \n            \n\n\n            \n                \n                    This is delete token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyJwtToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyJwtToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/Common/Providers/jwt.service.ts:25\n                \n            \n\n\n            \n                \n                    This is verify token method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Response } from 'express';\nimport { Login } from './../../Entities/login.entity';\n\n/**\n * This is a jwt service class all jwt related methjod is avaliabale here\n */\n@Injectable()\nexport class jwtServiceClass {\n  /**constructor */\n  constructor(private readonly jwtservice: JwtService) {}\n\n  /**\n   * This is create token method\n   * @param user\n   * @returns\n   */\n  async CreateJwtToken(login: Login) {\n    const jwt = await this.jwtservice.signAsync({ username: login.username });\n    return jwt;\n  }\n\n  /**This is verify token method */\n  async verifyJwtToken(token: string) {\n    const verifyToken = await this.jwtservice.verifyAsync(token);\n    return verifyToken;\n  }\n\n  /**This is delete token method */\n  async deleteToken(response: Response): Promise {\n    response.clearCookie('jwt');\n    return 'logout success';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/loginDto.html":{"url":"classes/loginDto.html","title":"class - loginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  loginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:12\n                        \n                    \n\n            \n                \n                    username creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/login.dto.ts:8\n                        \n                    \n\n            \n                \n                    username creation\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n/**\n * This is login dto\n */\nexport class loginDto {\n  /**username creation */\n  @ApiProperty()\n  username: string;\n\n  /**username creation */\n  @ApiProperty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\njwtServiceClass\n\njwtServiceClass\n\nUserModule -->\n\njwtServiceClass->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/userDto.html":{"url":"classes/userDto.html","title":"class - userDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Modules/user/dto/user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This is user Dto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:12\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:16\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:8\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:28\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:20\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:32\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/Modules/user/dto/user.dto.ts:24\n                        \n                    \n\n            \n                \n                    Name creation\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n/**\n * This is user Dto\n */\nexport class userDto {\n  /**Name creation */\n  @ApiProperty()\n  name: string;\n\n  /**Name creation */\n  @ApiProperty()\n  age: number;\n\n  /**Name creation */\n  @ApiProperty()\n  gender: string;\n\n  /**Name creation */\n  @ApiProperty()\n  phoneNumber: string;\n\n  /**Name creation */\n  @ApiProperty()\n  username: string;\n\n  /**Name creation */\n  @ApiProperty()\n  password: string;\n\n  /**Name creation */\n  @ApiProperty()\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bcrypt   (src/.../login.entity.ts)\n                        \n                        \n                            bcrypt   (src/.../user.service.ts)\n                        \n                        \n                            CacheKey   (src/.../cache.decorator.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            SWAGGER_CONFIG   (src/.../swagger.config.ts)\n                        \n                        \n                            TypeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/Entities/login.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This bcrypt is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Modules/user/user.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bcrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('bcryptjs')\n                    \n                \n\n            \n                \n                    This is used to hash the password\n\n                \n            \n\n        \n    \n\n    src/Common/Decorators/cache.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CacheKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (cacheKeyValue) =>\n  SetMetadata('cache-key', cacheKeyValue)\n                    \n                \n\n            \n                \n                    This is a custom decorator fro CacheKey\n\n                \n            \n\n        \n    \n\n    src/Common/Decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role) => SetMetadata('roles', role)\n                    \n                \n\n            \n                \n                    This is a custom decorator fro roles\n\n                \n            \n\n        \n    \n\n    src/Config/Swagger/swagger.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SWAGGER_CONFIG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SwaggerConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  Title: 'MockThon',\n  Description: 'all mockthon apis are avaliabale here',\n  Version: '1.0',\n  Tags: ['Template']\n}\n                    \n                \n\n            \n                \n                    This variable is used to configure the swagger related info\n\n                \n            \n\n        \n    \n\n    src/Config/TypeOrm/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TypeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TypeOrmInterface\n\n                    \n                \n                \n                    \n                        Default value : {\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: 'root',\n  database: 'mockthon'\n}\n                    \n                \n\n            \n                \n                    all typeOrm configurations are avaliable here\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
